[["index.html", "Introduction to R (2021) Part 1 Welcome", " Introduction to R (2021) Sarah Bonnin 2021-03-13 Part 1 Welcome Dates, time &amp; location Dates (2021): Module 1: March 15,16 Introduction to R and RStudio Paths and directories R basics Functions in R R scripts Data types &amp; data structures Module 2: March 22, 23 Input / output Library and packages Regular expressions Conditional statement Repetitive execution Module 3: April 12, 13: basic plotting plotting with ggplot2 Time: 10:00-13:00 Location: Online (Zoom) Instructors Sarah Bonnin Julia Ponomarenko from the CRG Bioinformatics core facility (office , 4th floor hospital side) Learning objectives Material All material is available from this page (https://biocorecrg.github.io/CRG_RIntroduction_2021/) and will be regularly updated. If you want to get the latest version locally, you can: download and uncompress the zip archive keep only the “docs” and \" images\" folders. open the “index.html” file in a web browser. "],["what-is-r.html", "Part 2 What is R ?", " Part 2 What is R ? Programming language and environment for data manipulation, statistical computing, and graphical display. Implementation of the S programming language Created at the University of Auckland, New Zealand: Initial version released in 1995 Stable version released in 2000 Free and open source ! https://www.r-project.org/ Interactive, flexible Very active community of developers and users! Many resources and forums available Access through a command-line interpreter: "],["what-is-rstudio.html", "Part 3 What is RStudio ? 3.1 RStudio access 3.2 RStudio interface 3.3 Setting up the folder structure for the course", " Part 3 What is RStudio ? Free and open source IDE (Integrated Development Environment) for R Available for Windows, Mac OS and LINUX 3.1 RStudio access RStudio Desktop installation RStudio access from the CRG server Access with CRG credentials For those who don’t have access to the CRG server, use the guest accounts. 3.2 RStudio interface 4 panels: top-left: scripts and files bottom-left: R console top-right: objects, history and environment bottom-right: tree of folders, graph window, packages, help window, viewer 3.3 Setting up the folder structure for the course Create the Rcourse folder (bottom-right panel, Files tab). Inside the Rcourse folder, create 3 sub-folder: Module1, Module2, Module3: Rcourse |-Module1 |-Module2 |-Module3 3.3.1 Note on files and folders names As you choose names for files and folders, a few rules will make your life easier: Do not use spaces. Do not use accents (e.g. replace é by e). Avoid special characters, although underscores are a safe option. "],["r-basics.html", "Part 4 R basics 4.1 Arithmetic operators 4.2 Simple calculations 4.3 Objects in R 4.4 Assignment operators 4.5 Assigning data to an object 4.6 Using objects 4.7 Names of objects", " Part 4 R basics 4.1 Arithmetic operators Use the R console as a calculator! Operator Function + addition - subtraction / division * multiplication ^ or ** exponential In the R console: 10 - 2 ## [1] 8 Hit Enter/Return for R to interpret the command. 4.2 Simple calculations Given the following table: type of RNA Total mRNA 329 miRNA 45 snoRNA 12 lncRNA 28 Calculate the total number of RNAs reported in the table: 329 + 45 + 12 + 28 ## [1] 414 What is the percentage of miRNA? ( 45 / 414 ) * 100 ## [1] 10.86957 4.2.1 HANDS-ON (3-5 minutes) Given the following table (number of exons / introns of the hg38 genome, Gencode 31 annotation): Total number of genes: 60651 Of which: Protein-coding genes | 19951 | Long non-coding RNA genes | 17948 | Small non-coding RNA genes | 7569 | Pseudogenes | 14773 | How many genes are we missing to reach the total number of genes? What is the percentage of long non-coding RNA genes? 4.3 Objects in R Everything that stores any kind of data in R is an object: 4.4 Assignment operators &lt;- or = Essentially the same but, to avoid confusions: Use &lt;- for assigning data to objects. Keep = for functions arguments (we will talk about it in a next section). 4.5 Assigning data to an object Assigning a value to the object B: B &lt;- 10 NOTE: You can see the objects you created in the upper-right panel in RStudio: the environment. Reassigning: modifying the content of an object: B + 10 B unchanged !! B &lt;- B + 10 B changed !! 4.6 Using objects You can use objects in your calculations: Create objects A and B: A &lt;- 7 B &lt;- 10 Sum up A and B, and save the sum in C: A + B C &lt;- A + B Note that if A or B change, C will NOT change, unless you re-run “C &lt;- A + B” 4.7 Names of objects Naming objects in R is quite flexible. However, there are a few rules and good practices to consider: Object names are case sensitive: object MyObject is not the same as myobject They can contains both numbers or letters but should START with a letter, e.g. 2myobject is not a valid object name. You can use underscores. Other special characters should be avoided. Avoid using function names as object names (e.g. do not create a getwd object). 4.7.1 HANDS-ON (3-5 minutes) Create the object myfirstobject, that contains the value 762. Create mysecondobject, that contains the value 80. Create mythirdobject , that contains the subtraction of mysecondobject from myfirstobject. "],["paths-and-directories.html", "Part 5 Paths and directories 5.1 Tree of directories 5.2 Navigate the tree of directory with the R console", " Part 5 Paths and directories The path of a file/directory is its location/address in the file system. Your home directory is the one that hosts your personal folder: for CRG users: /nfs/users/[yourgroup]/[yourusername] your Home is where your store your data, analysis, etc. You are the only one who can write in this folder (apart from the system administrator, if needed). 5.1 Tree of directories ~: shortcut to the home directory .: current directory ..: one directory up the tree In this example, Rcourse is a sub-directory of sbonnin, which in turn is a sub-direcory of bi, and so on. 5.2 Navigate the tree of directory with the R console Get the path of the current directory (know where you are working at the moment) with getwd (get working directory): getwd() Hit Enter/Return to execute getwd() in the R console. Change working directory with setwd (set working directory) (in a Windows or MAC OS system, you would typically double-click to reach sub-directories). Here we use commands/fonctions in the R console: Go to a directory giving the absolute path (the entire address): setwd(&quot;/users/bi/sbonnin/Rcourse&quot;) Same as: setwd(&quot;~/Rcourse&quot;) Go to a directory giving the relative path. For example, if you are in Rcourse, you can either go to Module1 using the absolute path: setwd(&quot;/users/bi/sbonnin/Rcourse/Module1&quot;) or the relative path: setwd(&quot;Module1&quot;) You are now in: “~/Rcourse/Module1” (check it with getwd() !). Move one directory “up” the tree: setwd(&quot;..&quot;) You are now in: “~/Rcourse” 5.2.1 HANDS-ON (3-5 minutes) Execute the following command in the R console: setwd(&quot;/&quot;) Where are you now? (use getwd()) Find your way back to the Module1 folder "],["functions.html", "Part 6 Functions", " Part 6 Functions In programming, a function is a section of a program that performs a specific task. For example, the function getwd, that we have seen before, is used as: getwd() and has the task of outputting the current working directory. You can recognize a function by its round brackets: function() A function can also take arguments/parameters: setwd(dir=&quot;Rcourse&quot;) setwd changes the current working directory to the directory specified with argument dir. Assign the output of a function to an object: Getting help / know how a function works: From the console: help(getwd) or (shortcut): ?getwd From the RStudio bottom-right panel: The help pages show: required/optional argument(s), if any. default values for each argument(s), if any. examples. detailed description. Get the example of a function: example(mean) Need more help? Ask your favourite Web search engine ! Note on arguments The help page shows the compulsory arguments in the Usage section: in the help page of getwd and setwd (above), you can see that getwd doesn’t take any compulsory argument, and setwd takes one compulsory argument that is called dir. Compulsory arguments can be given with their names: in such case you don’t need to respect a specific order, or without their names, in which case you have to respect the order specified in the help page! For example, the rep.int function (a variant of the rep function) takes 2 arguments (see in help page): x and times, in that order: # use arguments with their names: rep.int(x=1, times=3) ## [1] 1 1 1 # use arguments with their names without respecting the order: rep.int(times=3, x=1) ## [1] 1 1 1 # use arguments without their names but respecting the order: rep.int(1, 3) ## [1] 1 1 1 # use arguments without their names without respecting the order: rep.int(3, 1) ## [1] 3 # It works, but is not giving the expected output! "],["r-scripts.html", "Part 7 R scripts 7.1 Create and save a script 7.2 R syntax 7.3 RStudio tips in the console 7.4 Exercice 1. Getting started ~ 15 minutes", " Part 7 R scripts 7.1 Create and save a script Store commands in a .R/.r file/script. It will be your dry labbook. Create and save a script in RStudio with: File -&gt; New File -&gt; R Script File opens in the upper-left panel. Once the file has opened: File -&gt; Save Specify a name: the extension .R is automatically added Execute commands or blocks of commands from RStudio: 7.2 R syntax Case sensitive: g is not G Comment lines start with #. Comment lines are NOT interpreted by R. Commands are separated by a new line or ; # This is a comment: it will not be interpreted a &lt;- 10 A + 1 # Will throw an error because A and a are different 7.3 RStudio tips in the console Ctrl + Enter: execute the current line. Upper arrow: goes to the commands previously typed. Ctrl + cmd + : Browse command history. Type a letter in the console + “tab”: R Studio proposes the different functions or object stored which start with that letter. for example, type get + “tab”: 7.4 Exercice 1. Getting started ~ 15 minutes Create the script “exercise1.R” (in R Studio: File -&gt; New File) and save it to the “Rcourse/Module1” directory: you will save all the commands of exercise 1 in that script. Remember you can comment the code using #. 1- From the console, go to Rcourse/Module1. First check where you currently are with getwd(); then go to Rcourse/Module1 with setwd(). Remember that ~ is a shortcut to your home directory. correction getwd() setwd(&quot;Rcourse/Module1&quot;) setwd(&quot;~/Rcourse/Module1&quot;) 2- Using R as a calculator, calculate the square root of 654 (don’t know the function? Search the internet!). correction sqrt(654) ## [1] 25.57342 3- Create a new object “myobject” that contains value 60. Show “myobject” in the console. correction myobject &lt;- 60 myobject ## [1] 60 4- Subtract 1 from myobject. Reassign. correction myobject &lt;- myobject - 1 5- Create a new object “mysqrt” that will store the square root of “myobject.” correction mysqrt &lt;- sqrt(myobject) 6- Create a new object “mydiv” that will store the result of “myobject” divided by “mysqrt.” correction mydiv &lt;- myobject / mysqrt "],["data-types.html", "Part 8 Data types 8.1 Checking data types", " Part 8 Data types Each object has a data type: Numeric (number - integer or double) Character (text) Logical (TRUE / FALSE) 8.1 Checking data types Number: a &lt;- 10 mode(a) ## [1] &quot;numeric&quot; typeof(a) ## [1] &quot;double&quot; str(a) ## num 10 Text: b &lt;- &quot;word&quot; mode(b) ## [1] &quot;character&quot; typeof(b) ## [1] &quot;character&quot; str(b) ## chr &quot;word&quot; HANDS-ON (3 minutes) Create the following objects: o1 &lt;- &quot;R course&quot; o2 &lt;- 10 o3 &lt;- FALSE o4 &lt;- &quot;9&quot; Check the data type of each object with mode. Did you expect a different result? Why? "],["data-structures.html", "Part 9 Data structures 9.1 Vectors 9.2 Exercise 2. Numeric vector manipulation 9.3 Exercise 3. Character vector manipulation 9.4 Factors 9.5 Matrices 9.6 Data frames 9.7 Two-dimensional structures manipulation 9.8 Exercise 4. Matrix manipulation 9.9 Exercise 5. Data frame manipulation", " Part 9 Data structures The main data structures are: Vector Factor Matrix Data frame 9.1 Vectors A vector is a sequence of data elements of the same type. 329 45 12 28 9.1.1 Creating a vector Values are assigned to a vector using the c command (combining elements). Open and close the round brackets, and place the different elements, separated by commas. vector1 &lt;- c(329, 45, 12, 28) You can create an empty vector with: # empty vector vecempty &lt;- vector() # empty numerical vector with 5 elements vecnumempty &lt;- vector(mode=&quot;numeric&quot;, length=5) # empty character vector with 8 elements veccharempty &lt;- vector(mode=&quot;character&quot;, length=8) Create a sequence of consecutive numbers: vecnum &lt;- 10:16 # shortcut for: vecnum &lt;- c(10, 11, 12, 13, 14, 15, 16) # NOTES: both ends (10 and 16) are included Character vectors: each element is entered between (single or double) quotes. mRNA miRNA snoRNA lncRNA mynames &lt;- c(&quot;mRNA&quot;, &quot;miRNA&quot;, &quot;snoRNA&quot;, &quot;lncRNA&quot;) HANDS-ON (3 minutes) 1. Create a vector (choose the name) that contains a sequence of number, from 3 to 8, both included. 2. Create vector myfruits as: myfruits &lt;- c(apple, pear, orange) What is happening? Why? 9.1.2 Vector manipulation A vector can be named: each element of the vector can be assigned a name (number or character) # our previous numerical vector vector1 &lt;- c(329, 45, 12, 28) # assign names names(vector1) &lt;- c(&quot;mRNA&quot;, &quot;miRNA&quot;, &quot;snoRNA&quot;, &quot;lncRNA&quot;) # use an object which already contains a vector mynames &lt;- c(&quot;mRNA&quot;, &quot;miRNA&quot;, &quot;snoRNA&quot;, &quot;lncRNA&quot;) names(vector1) &lt;- mynames Get the length (number of elements) of a vector length(vector1) ## [1] 4 Extracting elements from vector a extract elements using their position (index) in the vector: vector1[1] ## mRNA ## 329 vector1[c(1,3)] ## mRNA snoRNA ## 329 12 vector1[2:4] ## miRNA snoRNA lncRNA ## 45 12 28 extract elements using their names: vector1[&quot;mRNA&quot;] ## mRNA ## 329 vector1[c(&quot;miRNA&quot;, &quot;lncRNA&quot;)] ## miRNA lncRNA ## 45 28 Reassigning a vector’s element # here we re-assign the 2nd element of vector1 with 31. vector1[2] &lt;- 31 vector1[&quot;miRNA&quot;] &lt;- 31 Removing a vector’s element # here we remove the 3rd element of vector1 # show in the console vector1 without its 3rd element: vector1[-3] ## mRNA miRNA lncRNA ## 329 31 28 # reassign vector1 without its 3rd element vector1 &lt;- vector1[-3] Show versus change x[-2] x unchanged ! x &lt;- x[-2] x reassigned ! 9.1.3 Combining vectors You can combine 2 (or more) vectors into one. Here, we combine v1 and v2 to create a vector v3 v1 &lt;- 2:5 v2 &lt;- 4:6 v3 &lt;- c(v1, v2) The elements of v2 are added after the elements of v1 Likewise, you can add elements at the end of a vector v3 &lt;- c(v3, 19) 9.1.4 Numeric vector manipulation Logical operators Operator Description &lt; less than &lt;= less than or equal to &gt; greater than &gt;= greater than or equal to == exactly equal to != not equal to !x not x x | y x OR y x &amp; y x AND y Which elements of a are equal to 2? a &lt;- 1:5 a == 2 ## [1] FALSE TRUE FALSE FALSE FALSE Which elements of a are superior to 2? a &lt;- 1:5 a &gt; 2 ## [1] FALSE FALSE TRUE TRUE TRUE Extract elements of a vector that comply with a condition: a &lt;- 1:5 a &gt;= 2 ## [1] FALSE TRUE TRUE TRUE TRUE a[a &gt;= 2] ## [1] 2 3 4 5 9.1.4.1 Operations on vectors Adding 2 to a vector adds 2 to each element of the vector: a &lt;- 1:5 a + 2 ## [1] 3 4 5 6 7 Same goes for subtractions, multiplications and divisions… Multiplying a vector by another vector of equal length a &lt;- c(2, 4, 6) b &lt;- c(2, 3, 0) a * b ## [1] 4 12 0 Multiplying a vector by another shorter vector a &lt;- c(2, 4, 6, 3, 1) b &lt;- c(2, 3, 0) a * b ## Warning in a * b: longer object length is not a multiple of shorter object ## length ## [1] 4 12 0 6 3 Vector a is “recycled” ! Summary statistics Function Description mean(x) mean / average median(x) median min(x) minimum max(x) maximum var(x) variance summary(x) mean, median, min, max, quartiles a &lt;- c(1, 3, 12, 45, 3, 2) summary(a) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## 1.00 2.25 3.00 11.00 9.75 45.00 9.1.4.2 Comparing vectors The %in% operator Which elements of a are also found in b ? a &lt;- 2:6 b &lt;- 4:10 a %in% b ## [1] FALSE FALSE TRUE TRUE TRUE Retrieve actual elements of a that are found in b: a &lt;- 2:6 b &lt;- 4:10 a[a %in% b] ## [1] 4 5 6 9.1.5 Character vector manipulation Character vectors are manipulated similarly to numeric ones. The %in% operator: k &lt;- c(&quot;mRNA&quot;, &quot;miRNA&quot;, &quot;snoRNA&quot;, &quot;RNA&quot;, &quot;lincRNA&quot;) p &lt;- c(&quot;mRNA&quot;,&quot;lincRNA&quot;, &quot;tRNA&quot;, &quot;miRNA&quot;) k %in% p ## [1] TRUE TRUE FALSE FALSE TRUE k[k %in% p] ## [1] &quot;mRNA&quot; &quot;miRNA&quot; &quot;lincRNA&quot; Select elements from vector m that are not exon m &lt;- c(&quot;exon&quot;, &quot;intron&quot;, &quot;exon&quot;) m != &quot;exon&quot; ## [1] FALSE TRUE FALSE m[m != &quot;exon&quot;] ## [1] &quot;intron&quot; 9.2 Exercise 2. Numeric vector manipulation 9.2.1 Exercise 2a. Create the script “exercise2.R” and save it to the “Rcourse/Module1” directory: you will save all the commands of exercise 2 in that script. Remember you can comment the code using #. 1- Go to Rcourse/Module1 First check where you currently are with getwd(); then go to Rcourse/Module1 with setwd() correction getwd() setwd(&quot;Rcourse/Module1&quot;) setwd(&quot;~/Rcourse/Module1&quot;) 2- Create a numeric vector “y” which contains the numbers from 2 to 11, both included. Show y in the console. correction y &lt;- c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11) # same as y &lt;- 2:11 # show in console: y ## [1] 2 3 4 5 6 7 8 9 10 11 3- How many elements are in y? I.e what is the length of vector y ? correction length(y) ## [1] 10 4- Show the 2nd element of y. correction y[2] ## [1] 3 5- Show the 3rd and the 6th elements of y. correction y[c(3,6)] ## [1] 4 7 6- Remove the 4th element of y: reassign. What is now the length of y ? correction # remove 4th element and reassign y &lt;- y[-4] # length of y length(y) ## [1] 9 7- Show all elements of y that are inferior to 7. correction # which elements of y are less than 7: y &lt; 7 ## [1] TRUE TRUE TRUE TRUE FALSE FALSE FALSE FALSE FALSE # show those elements y[ y &lt; 7 ] ## [1] 2 3 4 6 8- Show all elements of y that are superior or equal to 4 and inferior to 9. correction y[ y &gt;= 4 &amp; y &lt; 9 ] ## [1] 4 6 7 8 9- Create the vector x of 1000 random numbers from the normal distribution: First read the help page of the rnorm() function. correction # help page for the rnorm function help(rnorm) # produce a vector of 1000 random numbers from the normal distribution x &lt;- rnorm(1000) 10. What are the mean, median, minimum and maximum values of x? correction mean(x); median(x); min(x); max(x) ## [1] 0.01764546 ## [1] -0.007102336 ## [1] -3.112241 ## [1] 3.148654 11- Run the summary() function on x. What additional information do you obtain ? correction summary(x) ## Min. 1st Qu. Median Mean 3rd Qu. Max. ## -3.112241 -0.686158 -0.007102 0.017646 0.704310 3.148654 12- Create vector y2 as: y2 &lt;- c(1, 11, 5, 62, 18, 2, 8) 13- Which elements of y2 are also present in y ?Note: remember the %in% operator. correction y2[ y2 %in% y ] ## [1] 11 2 8 14- Multiply each element of y2 by 1.5: reassign. correction y2 &lt;- y2 * 1.5 15- Use the function any() to check if the number 3 is present.Check the help page of any()! correction # &quot;Given a set of logical vectors, is at least one of the values true?&quot; any( y2 == 3 ) ## [1] TRUE 9.2.2 Exercise 2b. 1- Create the vector myvector as: myvector &lt;- c(1, 2, 3, 1, 2, 3, 1, 2, 3) Create the same vector using the rep.int() function (?rep.int) correction myvector &lt;- rep.int(x=1:3, times=3) 2- Reassign the 5th, 6th and 7th position of myvector with the values 8, 12 and 32, respectively. correction # reassign one by one myvector[5] &lt;- 8 myvector[6] &lt;- 12 myvector[7] &lt;- 32 # or reassign all at once myvector[5:7] &lt;- c(8, 12, 32) 3- Calculate the fraction/percentage of each element of myvector (relative to the sum of all elements of the vector).Note:sum() can be useful… correction # sum of all elements of the vector mytotal &lt;- sum(myvector) # divide each element by the sum myvector / mytotal ## [1] 0.015625 0.031250 0.046875 0.015625 0.125000 0.187500 0.500000 0.031250 ## [9] 0.046875 # multiply by 100 to get a percentage (myvector / mytotal) * 100 ## [1] 1.5625 3.1250 4.6875 1.5625 12.5000 18.7500 50.0000 3.1250 4.6875 4- Add vector c(2, 4, 6, 7) to myvector (combining both vectors): reassign! correction # create the new vector newvector &lt;- c(2, 4, 6, 7) # combine both myvector and newvector c(myvector, newvector) ## [1] 1 2 3 1 8 12 32 2 3 2 4 6 7 # reassign myvector myvector &lt;- c(myvector, newvector) 9.3 Exercise 3. Character vector manipulation 9.3.1 Exercise 3a. Create the script “exercise3.R” and save it to the “Rcourse/Module1” directory: you will save all the commands of exercise 3 in that script. Remember you can comment the code using #. 1- Go to Rcourse/Module1 First check where you currently are with getwd(); then go to Rcourse/Module1 with setwd() correction getwd() setwd(&quot;Rcourse/Module1&quot;) setwd(&quot;~/Rcourse/Module1&quot;) 2- Create vector w as: w &lt;- rep(x=c(&quot;miRNA&quot;, &quot;mRNA&quot;), times=c(3, 2)) 3- View vector w in the console: how does function rep() work ? Play with the times argument. correction rep(x=c(&quot;miRNA&quot;, &quot;mRNA&quot;), times=c(3, 4)) ## [1] &quot;miRNA&quot; &quot;miRNA&quot; &quot;miRNA&quot; &quot;mRNA&quot; &quot;mRNA&quot; &quot;mRNA&quot; &quot;mRNA&quot; rep(x=c(&quot;miRNA&quot;, &quot;mRNA&quot;), times=c(10, 2)) ## [1] &quot;miRNA&quot; &quot;miRNA&quot; &quot;miRNA&quot; &quot;miRNA&quot; &quot;miRNA&quot; &quot;miRNA&quot; &quot;miRNA&quot; &quot;miRNA&quot; &quot;miRNA&quot; ## [10] &quot;miRNA&quot; &quot;mRNA&quot; &quot;mRNA&quot; 4- What is the output of table(w) ? What does the table function do ? 5- Type w[grep(pattern=“mRNA,” x=w)] and w[w == “mRNA”] Is there a difference between the two outputs? correction w[grep(pattern=&quot;mRNA&quot;, w)] ## [1] &quot;mRNA&quot; &quot;mRNA&quot; w[w == &quot;mRNA&quot;] ## [1] &quot;mRNA&quot; &quot;mRNA&quot; # no difference between the outputs 6- Now type w[grep(pattern=“RNA,” w)] and w[w == “RNA”] Is there a difference between the two outputs? correction w[grep(pattern=&quot;RNA&quot;, w)] ## [1] &quot;miRNA&quot; &quot;miRNA&quot; &quot;miRNA&quot; &quot;mRNA&quot; &quot;mRNA&quot; w[w == &quot;RNA&quot;] ## character(0) # grep outputs 5 values but == outputs none What is the difference between == and grep ? correction = looks for exact matches. grep looks for patterns. 7- Create vector g as: g &lt;- c(&quot;hsa-let-7a&quot;, &quot;hsa-mir-1&quot;, &quot;CLC&quot;, &quot;DKK1&quot;, &quot;LPA&quot;) How many elements do w and g contain? correction length(w); length(g) ## [1] 5 ## [1] 5 8- Do vectors w and g have the same length? Use the function identical() to check this. correction identical(x=length(w), y=length(g)) ## [1] TRUE 9- Name the elements of g using the elements of w. (i.e. the names of each element of g will be the elements of w). correction names(g) &lt;- w If you have time, continue with Exercise 3b below. 9.3.2 Exercise 3b. 1- Use the sub() function to replace miRNA with microRNA in the names of g. correction names(g) &lt;- sub(pattern=&quot;miRNA&quot;, replacement=&quot;microRNA&quot;, x=names(g)) 2- Count how many microRNAs and mRNAs there are in g based on the column names. correction table(names(g)) ## ## microRNA mRNA ## 3 2 3- Create vector tt as: tt &lt;- &quot;Introduction to R course&quot; How many characters does tt contain? Use nchar(). correction nchar(tt) ## [1] 24 4- Remove “Introduction to R” from tt. You can try with either substr() or gsub() correction substr(x=tt, start=17, stop=nchar(tt)) ## [1] &quot;R course&quot; gsub(pattern=&quot;Introduction to R&quot;, replacement=&quot;&quot;, x=tt) ## [1] &quot; course&quot; 9.4 Factors A factor is a vector object (1 dimension) used to specify a discrete classification (grouping) of the components of other vectors. Factors are mainly used for statistical modeling, and can also be useful for graphing. You can create factors with the factor function, for example: e &lt;- factor(c(&quot;high&quot;, &quot;low&quot;, &quot;medium&quot;, &quot;low&quot;)) # check the structure of e str(e) ## Factor w/ 3 levels &quot;high&quot;,&quot;low&quot;,&quot;medium&quot;: 1 2 3 2 Example of a character vector versus a factor # factor e &lt;- factor(c(&quot;high&quot;, &quot;low&quot;, &quot;medium&quot;, &quot;low&quot;)) # character vector e2 &lt;- c(&quot;high&quot;, &quot;low&quot;, &quot;medium&quot;, &quot;low&quot;) # Check the structure of both objects str(e) ## Factor w/ 3 levels &quot;high&quot;,&quot;low&quot;,&quot;medium&quot;: 1 2 3 2 str(e2) ## chr [1:4] &quot;high&quot; &quot;low&quot; &quot;medium&quot; &quot;low&quot; Groups in factors are called levels. Levels can be ordered. Then, some operations applied on numeric vectors can be used: # unordered factor: e &lt;- factor(c(&quot;high&quot;, &quot;low&quot;, &quot;medium&quot;, &quot;low&quot;)) max(e) # throws an error # ordered factor e_ord &lt;- factor(e, levels=c(&quot;low&quot;, &quot;medium&quot;, &quot;high&quot;), ordered=TRUE) max(e_ord) # outputs &quot;high&quot; 9.5 Matrices A matrix is a 2 dimensional vector. All columns in a matrix must have: the same type (numeric, character or logical) the same length 9.5.1 Creating a matrix From vectors with the rbind function: x &lt;- c(1, 44) y &lt;- c(0, 12) z &lt;- c(34, 4) # rbind: bind rows b &lt;- rbind(x, y, z) From vectors with the cbind function: i &lt;- c(1, 0, 34) j &lt;- c(44, 12, 4) # cbind: bind columns b &lt;- cbind(i, j) From scratch with the matrix function: # nrow: number of rows # ncol: number of columns b &lt;- matrix(c(1, 0, 34, 44, 12, 4), nrow=3, ncol=2) 9.5.2 Two-dimensional object Vectors have one index per element (1-dimension). Matrices have two indices (2-dimensions) per element, corresponding to the row and the column: Fetching elements of a matrix: The “coordinates” of an element in a 2-dimensional object will be first the row (on the left of the comma), then the column (on the right of the comma): 9.5.3 Matrix manipulation Add 1 to all elements of a matrix b &lt;- b + 1 Multiply by 3 all elements of a matrix b &lt;- b * 3 Subtract 2 to each element of the first row of a matrix b[1, ] &lt;- b[1, ] - 2 Replace elements that comply a condition: # Replace all elements that are greater than 3 with NA b[ b&gt;3 ] &lt;- NA 9.6 Data frames A data frame is a 2-dimensional structure. It is more general than a matrix. All columns in a data frame: can be of different types (numeric, character or logical) must have the same length A data frame is organized by column: columns are variables and rows are observations of each variable. 9.6.1 Create a data frame With the data.frame function: # stringsAsFactors: ensures that characters are treated as characters and not as factors d &lt;- data.frame(c(&quot;Maria&quot;, &quot;Juan&quot;, &quot;Alba&quot;), c(23, 25, 31), c(TRUE, TRUE, FALSE), stringsAsFactors = FALSE) Example why “stringsAsFactors = FALSE” is useful # Create a data frame with default parameters df &lt;- data.frame(label=rep(&quot;test&quot;,5), column2=1:5) # Replace one value df[2,1] &lt;- &quot;yes&quot; # Throws an error and doesn&#39;t replace the value ! # Create a data frame with: df2 &lt;- data.frame(label=rep(&quot;test&quot;,5), column2=1:5, stringsAsFactors = FALSE) # Replace one value df2[2,1] &lt;- &quot;yes&quot; # Works! Converting a matrix into a data frame: # create a matrix b &lt;- matrix(c(1, 0, 34, 44, 12, 4), nrow=3, ncol=2) # convert as data frame b_df &lt;- as.data.frame(b) 9.6.2 Data frame manipulation: Very similar to matrix manipulation. 9.7 Two-dimensional structures manipulation 9.7.1 Dimensions Get the number of rows and the number of columns: # Create a data frame d &lt;- data.frame(c(&quot;Maria&quot;, &quot;Juan&quot;, &quot;Alba&quot;), c(23, 25, 31), c(TRUE, TRUE, FALSE), stringsAsFactors = FALSE) # number of rows nrow(d) # number of columns ncol(d) Check the dimensions of the object: both number of rows and number of columns: # first element: number of rows # second element: number of columns dim(d) Dimension names Column and/or row names can be added to matrices and data frames colnames(d) &lt;- c(&quot;Name&quot;, &quot;Age&quot;, &quot;Vegetarian&quot;) rownames(d) &lt;- c(&quot;Patient1&quot;, &quot;Patient2&quot;, &quot;Patient3&quot;) Column and/or row names can be used to retrieve elements or sets of elements from a 2-dimensional object: d[,&quot;Name&quot;] # same as: d[,1] d[&quot;Patient3&quot;, &quot;Age&quot;] # same as: d[3,2] # for data frames only, the $ sign can be used to retrieve columns: # d$Name is d[,1] is d[, &quot;Name&quot;] Include names as you create objects: Matrix: m &lt;- matrix(1:4, ncol=2, dimnames=list(c(&quot;row1&quot;, &quot;row2&quot;), c(&quot;col1&quot;, &quot;col2&quot;))) + Data frame: df &lt;- data.frame(col1=1:2, col2=1:2, row.names=c(&quot;row1&quot;, &quot;row2&quot;)) 9.7.2 Manipulation Same principle as vectors… but in 2 dimensions! 9.7.2.1 Examples Select rows of b if at least one element in column 2 is greater than 24 (i.e. select patients if they are older than 24): # build data frame d d &lt;- data.frame(Name=c(&quot;Maria&quot;, &quot;Juan&quot;, &quot;Alba&quot;), Age=c(23, 25, 31), Vegetarian=c(TRUE, TRUE, FALSE), stringsAsFactors = FALSE) rownames(d) &lt;- c(&quot;Patient1&quot;, &quot;Patient2&quot;, &quot;Patient3&quot;) # The following commands all output the same result: d[d[,2] &gt; 24, ] d[d[,&quot;Age&quot;] &gt; 24, ] d[d$Age &gt; 24, ] Select patients (rows) based on 2 criteria: age of the patient (column 2) should be great than or equal to 25, and the patient should be vegetarian (column 3): d[ d$Age &gt;= 25 &amp; d$Vegetarian == TRUE, ] Select the columns of b if at least one element in the 3rd row is less than or equal to 4: # create b b &lt;- matrix(c(1, 0, 34, 44, 12, 4), nrow=3, ncol=2) # third row of b: b[3, ] # element(s) in the third row of b that is (are) less than or equal to 4 b[3, ] &lt;= 4 # retrieve the corresponding sub-matrix b[ ,b[3, ] &lt;= 4] 9.7.2.2 More useful commands Add a row or a column with rbind and cbind, respectively # add a column cbind(d, 1:3) # add a row rbind(d, 4:6) Add a patient to our data frame d: d &lt;- rbind(d, c(&quot;Jordi&quot;, 33, FALSE)) Process the sum of all rows or all columns with rowSums and colSums, respectively. # create a matrix b &lt;- matrix(1:20, ncol=4) # process sum of rows and sum of cols rowSums(b) colSums(b) The apply function Powerful tool to apply a command to all rows or all columns of a data frame or a matrix. For example, instead of calculating the sum of each row, you might be interested in calculating the median ? But rowMedians doesn’t exist ! apply takes 3 arguments: first argument X: 2-dimensional object second argument MARGIN: apply by row or by column? 1: by row 2: by column third argument FUN: function to apply to either rows or columns # median value of each row of b apply(X=b, MARGIN=1, FUN=median) # median value of each column of b apply(X=b, MARGIN=2, FUN=median) 9.8 Exercise 4. Matrix manipulation Create the script “exercise4.R” and save it to the “Rcourse/Module1” directory: you will save all the commands of exercise 4 in that script. Remember you can comment the code using #. correction getwd() setwd(&quot;Rcourse/Module1&quot;) setwd(&quot;~/Rcourse/Module1&quot;) 1- Create three numeric vectors x, y, z, each of 4 elements of your choice. correction x &lt;- 2:5 y &lt;- 6:9 z &lt;- 7:4 Use rbind() to create a matrix mat (3 rows and 4 columns) out of x, y and z. correction mat &lt;- rbind(x, y, z) 2- Create the same matrix now using the matrix function. Repeat the same using the byrow=TRUE parameter: what is different? correction mat &lt;- matrix(data=c(x, y, z), nrow=3, ncol=4) # &quot;byrow=TRUE&quot;: what is different in the output ? mat_byrow &lt;- matrix(data=c(x, y, z), nrow=3, ncol=4, byrow=TRUE) 3- Add names to mat’s columns: “a,” “b,” “c,” “d,” respectively. correction colnames(mat) &lt;- c(&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, &quot;d&quot;) 4- Calculate the sum of each row, and the sum of each column correction rowSums(mat); colSums(mat) 5- Create the matrix mat2 as: mat2 &lt;- matrix(c(seq(from=1, to=10, by=2), 5:1, rep(x=2017, times=5)), ncol=3) What does function seq() do? correction seq generate sequences of numbers. Here, it creates a sequences from 1 to 10 with a step of 2 numbers. 6- What are the dimensions of mat2 (number of rows and number of columns)? correction # number of rows nrow(mat2) # number of columns ncol(mat2) # dimensions: number of rows, number of columns dim(mat2) 7- Add column names to mat2: “day,” “month” and “year,” respectively. correction colnames(mat2) &lt;- c(&quot;day&quot;, &quot;month&quot;, &quot;year&quot;) 8- Add row names to mat2: letters “A” to “E” correction rownames(mat2) &lt;- c(&quot;A&quot;, &quot;B&quot;, &quot;C&quot;, &quot;D&quot;, &quot;E&quot;) rownames(mat2) &lt;- LETTERS[1:5] 9- Shows row(s) of mat2 where the month column is greater than or equal to 3. correction # select column month mat2[, &quot;month&quot;] # element(s) of column month that is (are) greater than or equal to 3 mat2[,&quot;month&quot;] &gt;= 3 # finally select row(s) where the month columns is greater than or equal to 3 mat2[mat2[,&quot;month&quot;] &gt;= 3,] 10- Replace all elements of mat2 that are equal to 2017 with 2018. correction # which elements of mat2 that are exactly equal to 2017 mat2==2017 # retrieve actual elements mat2[mat2==2017] # replace all 2017 with 2018 mat2[mat2==2017] &lt;- 2018 11- Multiply all elements of the 2nd column of mat2 by 7. Reassign mat2! correction # multiply all elements of the 2nd column of mat2 by 7 mat2[,2] * 7 # reassign mat2 with the new values of column 2 mat2[,2] &lt;- mat2[,2] * 7 12- Add the column named “time” to mat2, that contains values 8, 12, 11, 10, 8. Save in the new object mat3. correction mat3 &lt;- cbind(mat2, time=c(8, 12, 11, 10, 8)) 13- Replace all elements of mat3 that are less than 3 with NA. correction # which elements of mat3 that are less than 3 mat3 &lt; 3 # actually elements of mat3 that are less than 3 mat3[mat3 &lt; 3] # reassign elements of mat3 that are less than 3 with NA mat3[mat3 &lt; 3] &lt;- NA 14- Remove rows from mat3 if a NA is present. Save in the new object mat4. correction mat4 &lt;- na.omit(mat3) 15- Retrieve the smaller value of each column of mat4. Try different approaches: Retrieve the minimum for each column one by one. correction min(mat4[,&quot;day&quot;]) min(mat4[,&quot;month&quot;]) min(mat4[,&quot;year&quot;]) min(mat4[,&quot;time&quot;]) Retrieve the minimum of all columns simultaneously using the apply() function. correction # mat4: object # 2: by column # min: function to apply apply(mat4, 2, min) 9.9 Exercise 5. Data frame manipulation Create the script “exercise5.R” and save it to the “Rcourse/Module1” directory: you will save all the commands of exercise 5 in that script. Remember you can comment the code using #. correction getwd() setwd(&quot;Rcourse/Module1&quot;) setwd(&quot;~/Rcourse/Module1&quot;) 9.9.1 Exercise 5a 1- Create the following data frame: 43 181 M 34 172 F 22 189 M 27 167 F With Row names: John, Jessica, Steve, Rachel. And Column names: Age, Height, Sex. correction mydf &lt;- data.frame(Age=c(43, 34, 22, 27), Height=c(181, 172, 189, 167), Sex=c(&quot;M&quot;, &quot;F&quot;, &quot;M&quot;, &quot;F&quot;), row.names = c(&quot;John&quot;, &quot;Jessica&quot;, &quot;Steve&quot;, &quot;Rachel&quot;), stringsAsFactors=FALSE) 2- Check the structure of mydf with str(). correction str(mydf) 3- Calculate the average age and height in mydf Try different approaches: Calculate the average for each column separately. correction mean(mydf$Age) mean(mydf$Height) Calculate the average of both columns simultaneously using the apply() function. correction # we have to remove the Sex column: we can calculate the average only with numbers apply(mydf[,-3], 2, mean) apply(mydf[,1:2], 2, mean) apply(mydf[,-grep(&quot;Sex&quot;, colnames(mydf))], 2, mean) 4- Add one row to mydf: Georges who is 53 years old and 168cm tall. correction # Georges= allows us to enter the row name at the same time as we add a row mydf &lt;- rbind(mydf, Georges=c(53, 168, &quot;M&quot;)) 5- Change the row names of mydf so the data becomes anonymous: Use Patient1, Patient2, etc. instead of actual names. correction rownames(mydf) &lt;- c(&quot;Patient1&quot;, &quot;Patient2&quot;, &quot;Patient3&quot;, &quot;Patient4&quot;, &quot;Patient5&quot;) # try also the paste function! rownames(mydf) &lt;- paste(&quot;Patient&quot;, 1:5, sep=&quot;&quot;) 6- Create the data frame mydf2 that is a subset of mydf containing only the female entries. correction # which elements are female (&quot;F&quot; in the &quot;Sex&quot; colum) mydf$Sex==&quot;F&quot; # retrieve rows that contain the female entries, and save in mydf2 mydf2 &lt;- mydf[mydf$Sex==&quot;F&quot;,] 7- Create the data frame mydf3 that is a subset of mydf containing only entries of males taller than 170. correction # which entries are males mydf$Sex==&quot;M&quot; # which entries are greater than 170 in column &quot;Height&quot; mydf$Sex==&quot;M&quot; &amp; mydf$Height &gt; 170 # retrieve rows that contain the males that are taller than 170, and save in mydf3 mydf3 &lt;- mydf[mydf$Sex==&quot;M&quot; &amp; mydf$Height &gt; 170,] 9.9.2 Exercise 5b 1. Create two data frames mydf1 and mydf2 as: mydf1: 1 14 2 12 3 15 4 10 mydf2: 1 paul 2 helen 3 emily 4 john 5 mark With column names: “id,” “age” for mydf1, and “id,” “name” for mydf2. correction mydf1 &lt;- data.frame(id=1:4, age=c(14,12,15,10)) mydf2 &lt;- data.frame(id=1:5, name=c(&quot;paul&quot;, &quot;helen&quot;, &quot;emily&quot;, &quot;john&quot;, &quot;mark&quot;)) 2- Merge mydf1 and mydf2 by their “id” column. Look for the help page of merge and/or Google it! correction # input 2 data frames # &quot;by&quot; columns indicate by which column you want to merge the data merge(x=mydf1, y=mydf2, by.x=&quot;id&quot;, by.y=&quot;id&quot;) mydf3 &lt;- merge(x=mydf1, y=mydf2, by=&quot;id&quot;) 3- Order mydf3 by decreasing age. Look for the help page of order. correction # order the age column (default is increasing order) order(mydf3$age) # order the age column by decreasing order order(mydf3$age, decreasing = TRUE) # order the whole data frame by the column age in decreasing order mydf3[order(mydf3$age, decreasing = TRUE), ] 9.9.3 Exercise 5c 1- Using the download.file function, download this file to your current directory. (Right click on “this file” -&gt; Copy link location to get the full path). correction # failing: download.file(&quot;https://github.com/sbcrg/CRG_RIntroduction/blob/master/genes_dataframe.RData&quot;, &quot;genes_dataframe.RData&quot;) download.file(&quot;https://public-docs.crg.es/biocore/sbonnin/Rcourse/genes_dataframe.RData&quot;, &quot;genes_dataframe.RData&quot;) 2- The function dir() lists the files and directories present in the current directory: check if genes_dataframe.RData was copied. correction dir() 3- Load genes_dataframe.RData in your environment Use the load function. correction load(&quot;genes_dataframe.RData&quot;) 4- genes_dataframe.RData contains the mydf_genes object: is it now present in your environment? correction ls() 5- Explore mydf_genes and see what it contains You can use a variety of functions: str, head, tail, dim, colnames, rownames, class… correction str(mydf_genes) head(mydf_genes) tail(mydf_genes) dim(mydf_genes) colnames(mydf_genes) rownames(mydf_genes) class(mydf_genes) 6- Select rows for which pvalue_KOvsWT &lt; 0.05 AND log2FoldChange_KOvsWT &gt; 0.5. Store in the up object. correction # rows where pvalue_KOvsWT &lt; 0.05 mydf_genes$pvalue_KOvsWT &lt; 0.05 # rows where log2FoldChange_KOvsWT &gt; 0.5 mydf_genes$log2FoldChange_KOvsWT &gt; 0.5 # rows that comply both of the above conditions mydf_genes$pvalue_KOvsWT &lt; 0.05 &amp; mydf_genes$log2FoldChange_KOvsWT &gt; 0.5 # select rows for which pvalue_KOvsWT &lt; 0.05 AND log2FoldChange_KOvsWT &gt; 0.5 up &lt;- mydf_genes[mydf_genes$pvalue_KOvsWT &lt; 0.05 &amp; mydf_genes$log2FoldChange_KOvsWT &gt; 0.5,] How many rows (genes) were selected? 7- Select from the up object the Zinc finger protein coding genes (i.e. the gene symbol starts with Zfp). Use the grep() function. correction # extract gene symbol column up$gene_symbol # use grep to get the genes matching the pattern &quot;Zfp&quot; up[grep(&quot;Zf&quot;, up$gene_symbol), ] 8- Select rows for which pvalue_KOvsWT &lt; 0.05 AND log2FoldChange_KOvsWT is &gt; 0.5 OR &lt; -0.5. For the selection of log2FoldChange: give the abs function a try! Store in the diff_genes object. correction # rows where pvalue_KOvsWT &lt; 0.05 mydf_genes$pvalue_KOvsWT &lt; 0.05 # rows where log2FoldChange_KOvsWT &gt; 0.5 mydf_genes$log2FoldChange_KOvsWT &gt; 0.5 # rows where log2FoldChange_KOvsWT &lt; -0.5 mydf_genes$log2FoldChange_KOvsWT &gt; -0.5 # rows where log2FoldChange_KOvsWT &lt; -0.5 OR log2FoldChange_KOvsWT &gt; 0.5 mydf_genes$log2FoldChange_KOvsWT &gt; 0.5 | mydf_genes$log2FoldChange_KOvsWT &gt; -0.5 # same as above but using the abs function abs(mydf_genes$log2FoldChange_KOvsWT) &gt; 0.5 # combine all required criteria mydf_genes$pvalue_KOvsWT &lt; 0.05 &amp; abs(mydf_genes$log2FoldChange_KOvsWT) &gt; 0.5 # extract corresponding entries diff_genes &lt;- mydf_genes[mydf_genes$pvalue_KOvsWT &lt; 0.05 &amp; abs(mydf_genes$log2FoldChange_KOvsWT) &gt; 0.5,] How many rows (genes) were selected? "],["missing-values.html", "Part 10 Missing values", " Part 10 Missing values NA (Not Available) is a recognized element in R. Finding missing values in a vector # Create vector x &lt;- c(4, 2, 7, NA) # Find missing values in vector: is.na(x) # Remove missing values na.omit(x) x[ !is.na(x) ] Some functions can deal with NAs, either by default, or with specific arguments: x &lt;- c(4, 2, 7, NA) # default arguments mean(x) # set na.rm=TRUE mean(x, na.rm=TRUE) In a matrix or a data frame, keep only rows where there are no NA values: # Create matrix with some NA values mydata &lt;- matrix(c(1:10, NA, 12:2, NA, 15:20, NA), ncol=3) # Keep only rows without NAs mydata[complete.cases(mydata), ] # or na.omit(mydata) Check this R blogger post on missing/null values "],["input-output.html", "Part 11 Input / Output 11.1 On vectors 11.2 On data frames or matrices 11.3 Exercise 6.", " Part 11 Input / Output We will learn how to: Read in a file Write out a file Save a graph in a file (Module 3) 11.1 On vectors Read a file as a vector with the scan function # Read in file scan(file=&quot;file.txt&quot;) # Save in object k &lt;- scan(file=&quot;file.txt&quot;) By default, scans “double” (numeric) elements: it fails if the input contains characters. If non-numeric, you need to specify the type of data contained in the file: # specify the type of data to scan scan(file=&quot;file.txt&quot;, what=&quot;character&quot;) scan(file=&quot;~/file.txt&quot;, what=&quot;character&quot;) Regarding paths of files: If the file is not in the current directory, you can provide a full or relative path. For example, if located in the home directory, read it as: scan(file=&quot;~/file.txt&quot;, what=&quot;character&quot;) Write the content of a vector in a file: # create a vector mygenes &lt;- c(&quot;SMAD4&quot;, &quot;DKK1&quot;, &quot;ASXL3&quot;, &quot;ERG&quot;, &quot;CKLF&quot;, &quot;TIAM1&quot;, &quot;VHL&quot;, &quot;BTD&quot;, &quot;EMP1&quot;, &quot;MALL&quot;, &quot;PAX3&quot;) # write in a file write(x=mygenes, file=&quot;gene_list.txt&quot;) Regarding paths of files: When you write a file, you can also specify a full or relative path: # Write to home directory write(x=mygenes, file=&quot;~/gene_list.txt&quot;) # Write to one directory up write(x=mygenes, file=&quot;../gene_list.txt&quot;) 11.2 On data frames or matrices Read in a file into a data frame with the read.table function: a &lt;- read.table(file=&quot;file.txt&quot;) You can convert it as a matrix, if needed, with: a &lt;- as.matrix(read.table(file=&quot;file.txt&quot;)) Useful arguments: Write a data frame or matrix to a file: write.table(x=a, file=&quot;file.txt&quot;) Useful arguments: Note that \\t stands for tab-delimitation 11.3 Exercise 6. Create the script “exercise6.R” and save it to the “Rcourse/Module2” directory: you will save all the commands of exercise 6 in that script. Remember you can comment the code using #. correction getwd() setwd(&quot;Rcourse/Module2&quot;) setwd(&quot;~/Rcourse/Module2&quot;) 11.3.1 Exercise 6a. Input / output 1- Download folder “i_o_files” in your current directory with: # system invokes the OS command specified by the &quot;command&quot; argument. system(command=&quot;svn export https://github.com/biocorecrg/CRG_RIntroduction/trunk/i_o_files.tar.gz&quot;) # extract archive (tar: archive, gz: compressed) system(command=&quot;tar -xvzf i_o_files.tar.gz&quot;) # list files present in i_o_files dir(&quot;i_o_files&quot;) All files that will be used for exercise 6 are found in the i_o_files folder ! 2- Read in the content of ex6a_input.txt using the scan command; save in object z How many elements are in z? correction # scan content of the file z &lt;- scan(&quot;i_o_files/ex6a_input.txt&quot;) # number of elements (length of vector) length(z) 3- Sort z: save sorted vector in object “zsorted.” ?sort correction zsorted &lt;- sort(z) 4- Write zsorted content into file ex6a_output.txt. ?write correction write(zsorted, &quot;ex6a_output.txt&quot;) 5- Check the file you produced in the RStudio file browser (click on the file in bottom-right panel, “Files” tab). Save the content of zsorted again but this time setting the argument “ncolumns” to 1: how does the file look now? correction write(zsorted, &quot;ex6a_output.txt&quot;, ncolumns=1) 11.3.2 Exercise 6b - I/O on data frames: play with the arguments of read.table 1- field separator Read ex6b_IO_commas_noheader.txt in object fs. ?read.table. What are the dimensions of fs? correction # read in file with default parameters fs &lt;- read.table(&quot;i_o_files/ex6b_IO_commas_noheader.txt&quot;) dim(fs) Fields/columns are separated by commas: change the default value of the “sep” argument and read in the file again. What are now the dimensions of fs? correction # change field separator to &quot;,&quot; fs &lt;- read.table(&quot;i_o_files/ex6b_IO_commas_noheader.txt&quot;, sep=&quot;,&quot;) dim(fs) 2- field separator + header Read ex6b_IO_commas_header.txt in object fs_c. What are the dimensions of fs_c ? correction fs_c &lt;- read.table(&quot;i_o_files/ex6b_IO_commas_header.txt&quot;) dim(fs_c) Check head(fs_c) and change the default field separator to the appropriate one. correction fs_c &lt;- read.table(&quot;i_o_files/ex6b_IO_commas_header.txt&quot;, sep=&quot;,&quot;) The first row should to be the header (column names)! Change the default value of the header parameter and read in the file again. What are now the dimensions of fs_c ? correction fs_c &lt;- read.table(&quot;i_o_files/ex6b_IO_commas_header.txt&quot;, sep=&quot;,&quot;, header=TRUE) 3- skipping lines Read ex6b_IO_skip.txt in object sk. correction sk &lt;- read.table(&quot;i_o_files/ex6b_IO_skip.txt&quot;) Is R complaining ? Check “manually” the file (open it in the R Studio file browser). The “skip” argument allows you to ignore one or more line(s) before reading in a file. Introduce this argument with the appropriate number of lines to skip, and read in the file again. correction sk &lt;- read.table(&quot;i_o_files/ex6b_IO_skip.txt&quot;, skip=2) dim(sk) Is R still complaining? What are now the dimensions of sk ? Change the default field separator. What are now the dimensions of sk ? correction sk &lt;- read.table(&quot;i_o_files/ex6b_IO_skip.txt&quot;, skip=2, sep=&quot;,&quot;, header=T) 4- Comment lines Read ex6b_IO_comment.txt in object cl. correction cl &lt;- read.table(&quot;i_o_files/ex6b_IO_comment.txt&quot;) Is R complaining again ? Check manually the file and try to find out what is wrong… What is the “comment.char” argument used for ? Adjust the comment.char argument and read in the file again. correction cl &lt;- read.table(&quot;i_o_files/ex6b_IO_comment.txt&quot;, comment.char = &quot;*&quot;) Adjust also the header and sep arguments to read in the file correctly. What are now the dimensions of cl? correction cl &lt;- read.table(&quot;i_o_files/ex6b_IO_comment.txt&quot;, comment.char = &quot;*&quot;, sep=&quot;,&quot;, header=TRUE) dim(cl) 4- final Read ex6b_IO_final.txt in object “fin.” correction fin &lt;- read.table(&quot;i_o_files/ex6b_IO_final.txt&quot;) Adjust the appropriate arguments of “write.table” according to what you have learnt so far, in order to obtain the data frame “fin” of dimensions 167 x 4. correction fin &lt;- read.table(&quot;i_o_files/ex6b_IO_final.txt&quot;, sep=&quot;,&quot;, header=TRUE, skip=3, comment.char=&quot;&amp;&quot; ) "],["library-and-packages.html", "Part 12 Library and packages 12.1 R base 12.2 R contrib 12.3 Install a package 12.4 Load a package 12.5 Check what packages are currently loaded 12.6 List functions from a package 12.7 RStudio server at CRG 12.8 Exercise 7: Library and packages 12.9 Exercise (to do at home)", " Part 12 Library and packages Packages are collections of R functions, data, and compiled code in a well-defined format. The directory where packages are stored is called the library. Source of definitions: http://www.statmethods.net/interface/packages.html 12.1 R base A set a standard packages which are supplied with R by default. Example: package base (write, table, rownames functions), package utils (read.table, str functions), package stats (var, na.omit, median functions). 12.2 R contrib All other packages: CRAN: Comprehensive R Archive Network 15356* packages available find packages in https://cran.r-project.org/web/packages/ Bioconductor: 1823* packages available find packages in https://bioconductor.org/packages As of February 2019* Bioconductor Set of R packages specialized in the analysis of bioinformatics data. Bioconductor supports most types of genomics and NGS data (e.g. limma, DESeq2, BayesPeak) and integrates: Specific data classes (e.g. Granges from GenomicRanges) Integrates command line tools (e.g Rsamtools) Annotation tools (e.g. biomaRt) There are different types of Bioconductor packages: Software: set of functions e.g. DESeq2 (NGS data analysis) Annotation: annotation of specific arrays, organisms, events, etc. e.g. BSgenome.Hsapiens.UCSC.hg38 Experiment: data that can be loaded and used e.g. ALL (acute lymphoblastic leukemia dataset) 12.3 Install a package With RStudio: From the console: install.packages(pkgs=&quot;BiocManager&quot;) Install a bioconductor package: For R version &gt;= 3.5.0 # Install Bioconductor package manager install.packages(pkgs=&quot;BiocManager&quot;) # Install Bioconductor package BiocManager::install(&quot;DESeq2&quot;) For older R versions # Source (load into environment) script containing biocLite function source(&quot;http://www.bioconductor.org/biocLite.R&quot;) # Use biocLite function to install Bioconductor package biocLite(&quot;DESeq2&quot;) 12.4 Load a package With RStudio: From the console: library(&quot;ggplot2&quot;) 12.5 Check what packages are currently loaded sessionInfo() 12.6 List functions from a package With RStudio From the console ls(&quot;package:ggplot2&quot;) 12.7 RStudio server at CRG If you can’t install packages (permission issues), you first need to specify a writeable directory to install the packages into. Follow the steps below: # Go to your home directory setwd(&quot;~&quot;) # Create a directory where to store the packages dir.create(&quot;R_packages&quot;) # Add directory location to the library path .libPaths(&quot;~/R_packages/&quot;) 12.8 Exercise 7: Library and packages Create the script “exercise7.R” and save it to the “Rcourse/Module2” directory: you will save all the commands of exercise 7 in that script. Remember you can comment the code using #. correction getwd() setwd(&quot;Rcourse/Module2&quot;) setwd(&quot;~/Rcourse/Module2&quot;) 1- Install and load the packages ggplot2 and WriteXLS correction # Install the 2 packages at once install.packages(pkgs=c(&quot;ggplot2&quot;, &quot;WriteXLS&quot;)) # Load in the environment (one by one) library(&quot;ggplot2&quot;) library(&quot;WriteXLS&quot;) Check with sessionInfo() that the packages were loaded. 2- ggplot2 loads automatically the diamonds dataset in the working environment: you can use it as an object after ggplot2 is loaded. What are the dimensions of diamonds? What are the column names of diamond? correction # Dimensions of diamonds dim(diamonds) # Column names of diamonds colnames(diamonds) You can read the help page of the diamonds dataset to understand what it contains! Note: diamonds is a data frame: you can test it with is.data.frame(diamonds) (returns TRUE). 3- Select the columns carat, cut, color and price of diamonds and store in the object diams1. correction # Select columns diams1 &lt;- diamonds[,c(&quot;carat&quot;, &quot;cut&quot;, &quot;color&quot;, &quot;price&quot;)] 4- Install and load the package dplyr from the Console. correction # Install package install.packages(pkgs=&quot;dplyr&quot;) # Load package library(&quot;dplyr&quot;) 5- Use the function “sample_n” from the dplyr package to randomly sample 200 lines of diams1: save in diams object. correction # Subset data frame diams &lt;- sample_n(tbl=diams1, size=200) 6- Save diams into 2 files (different file formats): diamonds200.txt with function write.table (from package utils) diamonds200.xls with function WriteXLS (from package of the same name WriteXLS). Note: read about and play with the different options of both functions and check the output files. correction # Write a text file with write.table write.table(x=diams, file=&quot;diamonds200.txt&quot;, row.names=FALSE, quote=FALSE, sep=&quot;\\t&quot;) # Write an Excel file with WriteXLS WriteXLS(x=diams, ExcelFileName=&quot;diamonds200.xls&quot;, row.names=FALSE, col.names=TRUE, FreezeRow=1, BoldHeaderRow=TRUE) 12.9 Exercise (to do at home) 1- Read in file ex6c_input.txt (that is in folder downloaded for exercice 6 “i_o_files”) in object “extra” Warning: the file has a header ! Check the structure of extra (remember the str command). correction extra &lt;- read.table(&quot;i_o_files/ex6c_input.txt&quot;, header=TRUE) str(extra) 2- Read in the same file but, this time, set the argument as.is to TRUE. Check again the structure: what has changed ? correction extra &lt;- read.table(&quot;i_o_files/ex6c_input.txt&quot;, header=TRUE, as.is=TRUE) str(extra) 3- What are the column names of extra ? correction colnames(extra) 4- Change the name of the first column of extra from “State” to “Country.” correction # ex6ct all column names of extra colnames(extra) # ex6ct the name of the first column only colnames(extra)[1] # reassign name of the first column only colnames(extra)[1] &lt;- &quot;Country&quot; 5- How many countries are in the Eurozone, according to extra ? Remember the table function. ?table correction table(extra$Eurozone) 6- In the Eurozone column: change “TRUE” with “yes” and “FALSE” with “no.” correction # select the Eurozone column extra$Eurozone # elements of the Eurozone column that are exactly TRUE extra$Eurozone==TRUE # ex6ct actual values that are TRUE extra$Eurozone[extra$Eurozone==TRUE] # reassign all elements that are TRUE with &quot;yes&quot; extra$Eurozone[extra$Eurozone==TRUE] &lt;- &quot;yes&quot; # same with FALSE extra$Eurozone[extra$Eurozone==FALSE] &lt;- &quot;no&quot; 7- In the column Country: how many country names from the list contain the letter “c” (capital- or lower-case) ? Remember the grep function. Check the help page. correction # country names with &quot;c&quot; (lower-case) grep(&quot;c&quot;, extra$Country) # country names with &quot;c&quot; or &quot;C&quot; (ignoring case) grep(&quot;c&quot;, extra$Country, ignore.case = TRUE) # show actual country names grep(&quot;c&quot;, extra$Country, value=TRUE, ignore.case = TRUE) 8- According to that data frame: how many people live: + in the European union (whole table) ? + in the Eurozone ? correction # sum the whole population column sum(extra$Population) # select elements of extra where Eurozone is &quot;yes&quot; extra$Eurozone == &quot;yes&quot; # select only elements in Population for which the corresponding Eurozone elements are &quot;yes&quot; extra$Population[extra$Eurozone == &quot;yes&quot;] # sum that selection sum(extra$Population[extra$Eurozone == &quot;yes&quot;]) 9- Write extra into file ex6c_output.txt After each of the following steps, check the output file in the RStudio file browser (lower-right panel). Try with the default arguments. correction write.table(extra, file=&quot;ex6c_output.txt&quot;) Add the argument “row.names” set to FALSE. correction write.table(extra, file=&quot;ex6c_output.txt&quot;, row.names = FALSE) Add the argument “quote” set to FALSE. correction write.table(extra, file=&quot;ex6c_output.txt&quot;, row.names = FALSE, quote = FALSE) Add the argument “sep” set to “ or to,”\" correction write.table(extra, file=&quot;ex6c_output.txt&quot;, row.names = FALSE, quote = FALSE, sep=&quot;\\t&quot;) "],["regular-expressions.html", "Part 13 Regular expressions 13.1 Find simple matches with grep 13.2 Regular expressions to find more flexible patterns 13.3 Substitute or remove matching patterns with gsub 13.4 Predefined variables to use in regular expressions: 13.5 Use grep and regular expressions to retrieve columns by their names 13.6 Exercise 8: Regular expressions", " Part 13 Regular expressions Regular expressions are tools to describe patterns in strings. 13.1 Find simple matches with grep Find a pattern anywhere in the string (outputs the index of the element): # By default, outputs the index of the element matching the pattern grep(pattern=&quot;Gen&quot;, x=&quot;Genomics&quot;) Show actual element where the pattern is found (instead of the index only) with value=TRUE: # Set value=TRUE grep(pattern=&quot;Gen&quot;, x=&quot;Genomics&quot;, value=TRUE) Non case-sensitive search with ignore.case=TRUE: # Enter the pattern in lower-case, but case is ignored grep(pattern=&quot;gen&quot;, x=&quot;Genomics&quot;, value=TRUE, ignore.case=TRUE) Show if it DOESN’T match the pattern with inv=TRUE: # Shows what doesn&#39;t match grep(pattern=&quot;gen&quot;, x=&quot;Genomics&quot;, value=TRUE, ignore.case=TRUE, inv=TRUE) 13.2 Regular expressions to find more flexible patterns Special characters used for pattern recognition: Character Description $ Find pattern at the end of the string ^ Find pattern at the beginning of the string {n} The previous pattern should be found exactly n times {n,m} The previous pattern should be found between n and m times + The previous pattern should be found at least 1 time * One or more allowed, but optional ? One allowed, but optional Match your own pattern inside [] Pattern Description [abc] matches a, b, or c 1 matches a, b or c at the beginning of the element ^A[abc]+ matches A as the first character of the element, then either a, b or c ^A[abc]* matches A as the first character of the element, then optionally either a, b or c ^A[abc]{1}_ matches A as the first character of the element, then either a, b or c (one time!) followed by an underscore [a-z] matches every character between a and z [A-Z] matches every character between A and Z [0-9] matches every number between 0 and 9 Match anything contained between brackets (here either g or t) once: grep(pattern=&quot;[gt]&quot;, x=c(&quot;genomics&quot;, &quot;proteomics&quot;, &quot;transcriptomics&quot;), value=TRUE) Match anything contained between brackets once AND at the start of the element: grep(pattern=&quot;^[gt]&quot;, x=c(&quot;genomics&quot;, &quot;proteomics&quot;, &quot;transcriptomics&quot;), value=TRUE) Create a vector of email addresses: vec_ad &lt;- c(&quot;marie.curie@yahoo.es&quot;, &quot;albert.einstein01@hotmail.com&quot;, &quot;charles.darwin1809@gmail.com&quot;, &quot;rosalind.franklin@aol.it&quot;) Keep only email addresses finishing with “es”: grep(pattern=&quot;es$&quot;, x=vec_ad, value=TRUE) 13.3 Substitute or remove matching patterns with gsub From the same vector of email addresses: Remove the “@” symbol and the email provider from each address gsub(pattern=&quot;@[a-z.]+&quot;, replacement=&quot;&quot;, x=vec_ad) Substitute the “@” symbol with “at” gsub(pattern=&quot;@&quot;, replacement=&quot;_at_&quot;, x=vec_ad) Substitute “es” and “it” by “eu” gsub(pattern=&quot;es$|it$&quot;, replacement=&quot;eu&quot;, x=vec_ad) 13.4 Predefined variables to use in regular expressions: [:lower:] Lower-case letters [:upper:] Upper-case letters [:alpha:] Alphabetic characters: [:lower:] and [:upper:] [:digit:] Digits: 0 1 2 3 4 5 6 7 8 9 [:alnum:] Alphanumeric characters: [:alpha:] and [:digit:] [:print:] Printable characters: [:alnum:], [:punct:] and space. [:punct:] Punctuation characters: ! \" # $ % &amp; ’ ( ) * + , - . / : ; &lt; = &gt; ? @ [  ] ^ _ ` { | } ~ [:blank:] Blank characters: space and tab Take the previous character vector containing email addresses: Remove the @ and the email provider from each address gsub(pattern=&quot;@[[:lower:][:punct:]]+&quot;, replacement=&quot;&quot;, x=vec_ad) Same thing but remove additionally any number(s) BEFORE the @ (if any): gsub(pattern=&quot;[[:digit:]]*@[[:lower:][:punct:]]+&quot;, replacement=&quot;&quot;, x=vec_ad) Same but simplified: gsub(pattern=&quot;[[:digit:]]*@[[:print:]]+&quot;, replacement=&quot;&quot;, x=vec_ad) 13.5 Use grep and regular expressions to retrieve columns by their names Example of a data frame: # Build data frame df_regex &lt;- data.frame(expression1=1:4, expression2=2:5, expression3=4:7, annotation=LETTERS[1:4], expression4=6:3, average_expression=c(3.25, 3.75, 4.25, 4.75), stringsAsFactors=FALSE) # Select column names that start with &quot;expression&quot; grep(pattern=&quot;^expression&quot;, x=colnames(df_regex)) # Select columns from df_regex if their names start with &quot;expression&quot; df_regex[, grep(pattern=&quot;^expression&quot;, colnames(df_regex))] 13.6 Exercise 8: Regular expressions Create the script “exercise8.R” and save it to the “Rcourse/Module2” directory: you will save all the commands of exercise 8 in that script. Remember you can comment the code using #. correction getwd() setwd(&quot;~/Rcourse/Module2&quot;) 1- Play with grep Create the following data frame df2 &lt;- data.frame(age=c(32, 45, 12, 67, 40, 27), citizenship=c(&quot;England&quot;, &quot;India&quot;, &quot;Spain&quot;, &quot;Brasil&quot;, &quot;Tunisia&quot;, &quot;Poland&quot;), row.names=paste(rep(c(&quot;Patient&quot;, &quot;Doctor&quot;), c(4, 2)), 1:6, sep=&quot;&quot;), stringsAsFactors=FALSE) Using grep: create the smaller data frame df3 that contains only the Patient’s but NOT the Doctor’s information. correction # Select row names rownames(df2) # Select only rownames that correspond to patients grep(&quot;Patient&quot;, rownames(df2)) # Create data frame that contains only those rows df3 &lt;- df2[grep(&quot;Patient&quot;, rownames(df2)), ] Use grep and one regular expression to retrieve from df2 patients/doctors coming from either Brasil or Spain. Brainstorm a bit! correction df2[grep(&quot;a[a-z]*i&quot;, df2$citizenship),] Use grep and one regular expression to retrieve from df2 patients/doctors coming from either Brasil or England. correction df2[grep(&quot;[gi]l&quot;, df2$citizenship),] 2- Play with gsub Build this vector of file names: vector1 &lt;- c(&quot;L2_sample1_GTAGCG.fastq.gz&quot;, &quot;L1_sample2_ATTGCC.fastq.gz&quot;, &quot;L1_sample3_TGTTAC.fastq.gz&quot;, &quot;L4_sample4_ATGGTA.fastq.gz&quot;) Use gsub and an appropriate regular expression on vector1 to retrieve only “sample1,” “sample2,” “sample3” and “sample4.” correction # | is used as OR gsub(pattern=&quot;L[124]{1}_|_[ATGC]{6}.fastq.gz&quot;, replacement=&quot;&quot;, x=vector1) abc↩︎ "],["conditional-statement.html", "Part 14 Conditional statement 14.1 Exercise 9: If statement", " Part 14 Conditional statement Conditional statements are expressions that perform different computations or actions depending on whether a predefined boolean condition is TRUE or FALSE. “if” statement Structure of the if statement: if(condition){ action_command } If the condition is TRUE, then proceed to the action_command; if it is FALSE, then nothing happens. Note the usage of curly brakets {} to start and end the conditional! k &lt;- 10 # print if value is &gt; 3 if(k &gt; 3){ print(k) } # print if value is &lt; 3 if(k &lt; 3){ print(k) } With else if(condition){ action_command1 }else{ action_command2 } If the condition is TRUE, then proceed to action_command1; if the condition is FALSE, proceed to action_command2. k &lt;- 3 if(k &gt; 3){ print(&quot;greater than 3&quot;) }else{ print(&quot;less than 3&quot;) } With else if if(condition1){ action_command1 }else if(condition2){ action_command2 }else{ action_command3 } If the condition1 is TRUE, then proceed to the action_command1; if the condition1 is FALSE, test for condition2: if the condition2 is TRUE, proceed to the action_command2; if neither condition1 nor condition2 are TRUE, then proceed to the action_command3 (else). Note that you can add up as many else if statements as you want, but only one else (not compulsory either). Example without else k &lt;- -2 # Test whether k is positive or negative or equal to 0 if(k &lt; 0){ print(&quot;negative&quot;) }else if(k &gt; 0){ print(&quot;positive&quot;) }else if(k == 0){ print(&quot;is 0&quot;) } Example with else k &lt;- 10 # print if value is &lt;= 3 if(k &lt;= 3){ print(&quot;less than or equal to 3&quot;) }else if(k &gt;= 8){ print(&quot;greater than or equal to 8&quot;) }else{ print(&quot;greater than 3 and less than 8&quot;) } 14.1 Exercise 9: If statement Create the script “exercise9.R” and save it to the “Rcourse/Module2” directory: you will save all the commands of exercise 9 in that script. Remember you can comment the code using #. correction getwd() setwd(&quot;~/Rcourse/Module2&quot;) 1- Create vector vec2 as: vec2 &lt;- c(&quot;kiwi&quot;, &quot;apple&quot;, &quot;pear&quot;, &quot;grape&quot;) Use an if statement and the %in% function to check whether “apple” is present in vec2 (in such case print “there is an apple!”) correction if(&quot;apple&quot; %in% vec2){ print(&quot;there is an apple there&quot;) } Use an if statement and the %in% function to check whether “grapefruit” is present in vec2: if “grapefruit” is not found, test whether “pear” is found (using else if). correction if(&quot;grapefruit&quot; %in% vec2){ print(&quot;there is a grapefruit here&quot;) }else if(&quot;pear&quot; %in% vec2){ print(&quot;there is no grapefruit here, but there is a pear!&quot;) } Add an else section in case neither grapefruit nor pear is found in vec2. Test your if statement also on vec3: vec3 &lt;- c(&quot;cherry&quot;, &quot;strawberry&quot;, &quot;blueberry&quot;, &quot;peach&quot;) correction if(&quot;grapefruit&quot; %in% vec2){ print(&quot;there is a grapefruit here&quot;) }else if(&quot;pear&quot; %in% vec2){ print(&quot;there is no grapefruit here, but there is a pear!&quot;) }else{ print(&quot;no grapefruit and no pear can be found&quot;) } "],["repetitive-execution.html", "Part 15 Repetitive execution 15.1 Exercise 10: For loop", " Part 15 Repetitive execution Loops are used to repeat a specific block of code. Structure of the for loop: for(i in vector_expression){ action_command } 3 main elements: i is the loop variable: it is updated at each iteration. vector_expression: value attributed to i at each iteration (the number of iterations is the length of vector_expression). action_command: what action to take at each iteration. Note the usage of curly brakets {} to start and end the loop! Example: for(i in 2:5){ # prints the value of i at each iteration print(i) # multiplies i by 2 at each iteration y &lt;- i*2 # prints the value of y at each iteration print(y) } Example of a for loop that iterates over a character vector: # Character vector myfruits &lt;- c(&quot;apple&quot;, &quot;pear&quot;, &quot;grape&quot;) # The for loop prints the current element j, and the number of characters of element j for(j in myfruits){ print(j) print(nchar(j)) } Example of a for loop that iterates over each row of a matrix, and prints the minimum value of that row : # Matrix of 50 rows, 16 columns mymat &lt;- matrix(rnorm(800), nrow=50) # For loop over mymat rows # 1:nrow(mymat): ranges from 1 to the number of rows in the matrix: 1, 2, 3, 4, ...., 48, 49, 50 for(i in 1:nrow(mymat)){ # prints the value of i at each iteration print(i) # prints the minimum value of the ith row of mymat at each iteration print(min(mymat[i,])) } If statement in For loop: You can combine for loops and if statements: # Matrix mymat &lt;- matrix(rnorm(800), nrow=50) # Loop over rows of mymat and print row if its median value is &gt; 0 for(i in 1:nrow(mymat)){ # extract the current row rowi &lt;- mymat[i,] # if median of row is &gt; 0, print row if(median(rowi) &gt; 0){ print(rowi) } } You can also have a look at this tutorial, to know more about loops. 15.1 Exercise 10: For loop Create the script “exercise10.R” and save it to the “Rcourse/Module2” directory: you will save all the commands of exercise 10 in that script. Remember you can comment the code using #. correction getwd() setwd(&quot;~/Rcourse/Module2&quot;) 1- Write a for loop that iterates over the sequence of numbers 2 to 10 (both included), and prints the square root of each number (function sqrt()). correction for(i in 2:10){ print(sqrt(i)) } 2- Write a for loop that iterates over the sequence of numbers 5 to 15 (both included), and prints a new vector of 2 elements containing the number and its square root correction for(i in 5:15){ veci &lt;- c(i, sqrt(i)) print(veci) } 3- Create the following matrix mat1 &lt;- matrix(rnorm(40), nrow=20) Write a for loop that iterates over each row of mat1 and prints the median value of each row. correction for(j in 1:nrow(mat1)){ # extract the row rowj &lt;- mat1[j,] # compute the median medrowj &lt;- median(rowj) # print median value in row print(medrowj) } # with less lines of code: for(j in 1:nrow(mat1)){ # print median value in row print(median(mat1[j,])) } 2- If statement in for loop Create the following matrix: mat4 &lt;- matrix(c(2, 34, 1, NA, 89, 7, 12, NA, 0, 38), nrow=5) Write a for loop that iterates over each row of mat4: if an NA is found, print the row number and the entire row where the NA is found. correction for(k in 1:nrow(mat4)){ # extract row rowk &lt;- mat4[k,] if(any(is.na(rowk))){ print(k) print(rowk) } } 3- For loop, if statement and regular expression Create vector vec4 as: vec4 &lt;- c(&quot;Oct4&quot;, &quot;DEPP&quot;, &quot;RSU1&quot;, &quot;Hk2&quot;, &quot;ZNF37A&quot;, &quot;C1QL1&quot;, &quot;Shh&quot;, &quot;Cdkn2a&quot;) vec4 contains Human and Mouse gene symbols. Loop over each element of vec4: If the element is a human gene (both characters and numbers; all characters are written in upper-case), print a vector of two elements: the name of the gene and “human gene.” If the element is a mouse gene (both characters and numbers; only the first character is written in upper-case), print a vector of two elements: the name of the gene and “mouse gene.” Tip 1: Use grep and a regular expression in the if statement ! Tip 2: When grep does not find a match, it returns an element of length 0 ! Tip 3: You can also use grepl: check the help page How do you get started? First, work on the regular expressions: how do you retrieve Human genes only? How do you retrieve Mouse genes only? Then, integrate the regular expressions in the if statement. Finally, integrate all this in a for loop! correction for(gene in vec4){ if(length(grep(pattern=&quot;^[A-Z0-9]+$&quot;, x=gene)) != 0){ print(c(gene, &quot;human gene&quot;)) }else if(length(grep(pattern=&quot;^[A-Z]{1}[a-z0-9]+$&quot;, x=gene)) != 0){ print(c(gene, &quot;mouse gene&quot;)) } } # With grepl # grepl returns a logical vector (match or not for each element of x), not the matching elements themselves. for(gene in vec4){ if(grepl(pattern=&quot;^[A-Z0-9]+$&quot;, x=gene)){ print(c(gene, &quot;human gene&quot;)) }else if(grepl(pattern=&quot;^[A-Z]{1}[a-z0-9]+$&quot;, x=gene)){ print(c(gene, &quot;mouse gene&quot;)) } } # easier way! whenever a lower case character is present: it is from mouse for(gene in vec4){ if(length(grep(pattern=&quot;[[:lower:]]&quot;, x=gene)) != 0){ print(c(gene, &quot;mouse gene&quot;)) }else{ print(c(gene, &quot;human gene&quot;)) } } "],["base-plots-in-r.html", "Part 16 “Base” plots in R 16.1 Scatter plots 16.2 Bar plots 16.3 Pie charts 16.4 Box plots 16.5 Histograms", " Part 16 “Base” plots in R R-base package graphics offers functions for producing many plots, for example: scatter plots - plot() bar plots - barplot() pie charts - pie() box plots - boxplot() histograms - hist() 16.1 Scatter plots A scatter plot has points that show the relationship between two sets of data. Simple scatter plot # Create 2 vectors x &lt;- 1:10 y &lt;- x^2 # Plot x against y plot(x, y) Note that if one vector only is given as an input, it will be plotted against the indices of each element Add arguments: col: color pch: type of point type: “l” for line, “p” for point, “b” for both point and line main: title of the plot plot(x, y, col=&quot;red&quot;, pch=2, type=&quot;b&quot;, main=&quot;a pretty scatter plot&quot;) You can play a bit: plot(x, y, col=1:10, pch=1:10, cex=1:10, type=&quot;b&quot;, main=&quot;an even prettier scatter plot&quot;) Different type of points that you can use: About colors Color codes 1 to 8 are taken from the palette() function and respectively code for: “black,” “red,” “green3,” “blue,” “cyan,” “magenta,” “yellow,” “gray.” # see the 8-color palette: palette() There is a larger set of build-in colors that you can use: # see all 657 possible build-in colors: colors() # looking for blue only? You can pick from 66 blueish options: grep(&quot;blue&quot;, colors(), value=TRUE) You can also find them here. change the default palette with one of your choice: palette(grep(&quot;blue&quot;, colors(), value=TRUE)) change the palette back to default palette(&quot;default&quot;) 16.2 Bar plots A bar chart or bar plot displays rectangular bars with lengths proportional to the values that they represent. A simple bar plot : # Create a vector x &lt;- rep(c(&quot;PhDstudent&quot;, &quot;Postdoc&quot;, &quot;Technician&quot;, &quot;PI&quot;), c(8,10,5,2)) # Count number of occurences of each character string mytable &lt;- table(x) # Bar plot using that table barplot(mytable) Customize a bit : col : color main : title of the plot las : orientation of x-axis labels: “2”: perpendicular to axis barplot(mytable, col=1:4, main=&quot;bar plot&quot;, las=2) Customize the ordering of the bars : By default, the bars are organized in alphabetical order. You can change it with the factors. # Create an ordered factor out of x xfact &lt;- factor(x, levels=c(&quot;PhDstudent&quot;, &quot;Postdoc&quot;, &quot;Technician&quot;, &quot;PI&quot;), ordered=TRUE) # Produce the table xfacttable &lt;- table(xfact) # Plot the same way barplot(xfacttable, col=1:4, main=&quot;reorganized bar plot&quot;, las=2) Let’s make a stacked barplot : # Create a matrix of number of type of employees per research program : barmat &lt;- matrix(c(8, 10, 9, 2, 6, 4, 5, 3, 14, 13, 16, 4, 11, 10, 8, 5), nrow=4, dimnames=list(c(&quot;Technician&quot;, &quot;PhDstudent&quot;, &quot;PostDoc&quot;, &quot;PI&quot;), c(&quot;BG&quot;, &quot;CDB&quot;, &quot;GRSCC&quot;, &quot;SB&quot;))) # Plot barplot barplot(barmat, col=sample(colors(), 4)) Add some parameters: # set a random color vector mycolors &lt;- sample(colors(), 4) # plot barplot # ylim sets the lower and upper limit of the y-axis: here it allows us to fit the legend ! barplot(barmat, col=mycolors, ylim=c(0,50), main=&quot;stacked barplot&quot;) # add a legend # first argument is the legend position legend(&quot;topleft&quot;, legend=c(&quot;Technician&quot;, &quot;PhDstudent&quot;, &quot;PostDoc&quot;, &quot;PI&quot;), fill=mycolors) 16.3 Pie charts A pie chart is a circular charts which is divided into slices, illustrating proportions. Using our previous vector, build a simple pie chart: # Create a vector x &lt;- rep(c(&quot;PhDstudent&quot;, &quot;Postdoc&quot;, &quot;Technician&quot;, &quot;PI&quot;), c(8,10,5,2)) # Count number of occurences of each string mytable &lt;- table(x) pie(mytable, main=&quot;pie chart&quot;, col=c(&quot;lightblue&quot;, &quot;lightgreen&quot;, &quot;salmon&quot;, &quot;maroon&quot;)) 16.4 Box plots A boxplot is a convenient way to describe the distribution of the data. A simple boxplot: # Create a matrix of 1000 random values from the normal distribution (4 columns, 250 rows) x &lt;- matrix(rnorm(1000), ncol=4) # Basic boxplot boxplot(x) Add some arguments : xlab: x-axis label ylab: y-axis label at: position of each box along the x-axis: here we skip position 3 to allow more space between boxes 1/2 and 3/4 boxplot(x, xlab=&quot;sample&quot;, ylab=&quot;expression&quot;, at=c(1, 2, 4, 5)) Add an horizontal line at y=0 with abline(); arguments of abline : h : y-axis starting point of horizontal line (v for a vertical line) col : color lwd : line thickness lty : line type # First plot the box plot as before: boxplot(x, xlab=&quot;sample&quot;, ylab=&quot;expression&quot;, at=c(1, 2, 4, 5), main=&quot;my boxplot&quot;) # Then run the abline function abline(h=0, col=&quot;red&quot;, lwd=3, lty=&quot;dotdash&quot;) Line types in R: 16.5 Histograms A histogram graphically summarizes the distribution of the data. A simple histogram # Vector of 200 random values from the normal distribution x &lt;- rnorm(200) # Plot histogram hist(x) Add parameters: border: color of bar borders breaks: number of bars the data is divided into cex.main: size of title cex.lab: size of axis labels hist(x, border=&quot;blue&quot;, breaks=50, main=&quot;Histogram&quot;, xlab=&quot;&quot;, cex.main=2.5, cex.lab=2) "],["how-to-save-plots.html", "Part 17 How to save plots 17.1 With R Studio 17.2 With the console 17.3 Exercise 11: Base plots", " Part 17 How to save plots 17.1 With R Studio 17.2 With the console # Open the file that will contain your plot (the name is up to you) pdf(file=&quot;myplot.pdf&quot;) # execute the plot plot(1:10) # Close the file that will contain the plot dev.off() Formats R supports a variety of file formats for figures: pdf, png, jpeg, tiff, bmp, svg, ps. They all come with their own function, for example: # TIFF tiff(file=&quot;myfile.tiff&quot;) plot(1:10) dev.off() # JPEG jpeg(file=&quot;myfile.jpeg&quot;) plot(1:10) dev.off() # etc. The size of the output file can be changed: # Default: 7 inches (both width and height) for svg, pdf, ps. svg(file=&quot;myfile.svg&quot;, width=8, height=12) plot(1:10) dev.off() # Default: 480 pixels (both width and height) for jpeg, tiff, png, bmp. png(file=&quot;myfile.png&quot;, width=500, height=600) plot(1:10) dev.off() Note that pdf is the only format that supports saving several pages: pdf(file=&quot;myfile_pages.pdf&quot;) plot(1:10) plot(2:20) dev.off() Plot several figures in one page You can output more than one plot per page using the par() function (sets graphical parameters) and the mfrow argument. jpeg(file=&quot;myfile_multi.jpeg&quot;) # organize the plot in 1 row and 2 columns: # nr: number of rows # nc: number of columns par(mfrow=c(nr=1, nc=2)) plot(1:10) plot(2:20) dev.off() jpeg(file=&quot;myfile_multi4.jpeg&quot;) # organize the plot in 2 rows and 2 columns par(mfrow=c(nr=2, nc=2)) # top-left plot(1:10) # top-right barplot(table(rep(c(&quot;A&quot;,&quot;B&quot;), c(2,3)))) # bottom-left pie(table(rep(c(&quot;A&quot;,&quot;B&quot;), c(2,3)))) # bottom-right hist(rnorm(2000)) dev.off() 17.3 Exercise 11: Base plots Create the script “exercise11.R” and save it to the “Rcourse/Module3” directory: you will save all the commands of exercise 11 in that script. Remember you can comment the code using #. correction getwd() setwd(&quot;~/Rcourse/Module3&quot;) 17.3.1 Exercise 11a- scatter plot 1- Create the following data frame genes &lt;- data.frame(sample1=rnorm(300), sample2=rnorm(300)) 2- Create a scatter plot showing sample1 (x-axis) vs sample2 (y-axis) of genes. correction plot(genes$sample1, genes$sample2) 3- Change the point type and color. correction plot(genes$sample1, genes$sample2, col=&quot;lightblue&quot;, pch=3) 4- Change x-axis and y-axis labels to “Sample 1” and “Sample 2,” respectively. correction plot(genes$sample1, genes$sample2, col=&quot;lightblue&quot;, pch=3, xlab=&quot;Sample 1&quot;, ylab=&quot;Sample 2&quot;) 5- Add a title to the plot. correction plot(genes$sample1, genes$sample2, col=&quot;lightblue&quot;, pch=3, xlab=&quot;Sample 1&quot;, ylab=&quot;Sample 2&quot;, main=&quot;scatter plot&quot;) 6- Add a vertical red line that shows the median expression value of sample 1. Do it in two steps: a. calculate the median expression of genes in sample 1. b. plot a vertical line using abline(). correction # median expression of sample1 med1 &lt;- median(genes$sample1) # plot plot(genes$sample1, genes$sample2, col=&quot;lightblue&quot;, pch=3, xlab=&quot;Sample 1&quot;, ylab=&quot;Sample 2&quot;, main=&quot;scatter plot&quot;) # vertical line abline(v=med1, col=&quot;red&quot;) 17.3.2 Exercise 11b- bar plot + pie chart 1- Create the following vector genes_significance &lt;- rep(c(&quot;enriched&quot;, &quot;depleted&quot;, &quot;none&quot;), c(20, 32, 248)) 2- The vector describes whether a gene is up- (enriched) or down- (depleted) regulated, or not regulated (none). Produce a barplot that displays this information: how many genes are enriched, depleted, or not regulated. correction barplot(table(genes_significance)) 3- Color the bars of the boxplot, each in a different color (3 colors of your choice) correction barplot(table(genes_significance), col=c(&quot;blue&quot;, &quot;red&quot;, &quot;grey&quot;)) # If you want to order the bars not by the default (alphabetical) order, you need to create an ordered factor! genes_factor &lt;- factor(genes_significance, ordered=TRUE, levels=c(&quot;enriched&quot;, &quot;none&quot;, &quot;depleted&quot;)) barplot(table(genes_factor), col=c(&quot;blue&quot;, &quot;red&quot;, &quot;grey&quot;)) 4- Use the argument “names.arg” in barplot() to rename the bars: Change depleted to “Down,” enriched to “Up,” none to “Not significant” correction barplot(table(genes_significance), col=c(&quot;blue&quot;, &quot;red&quot;, &quot;grey&quot;), names.arg=c(&quot;Down&quot;, &quot;Up&quot;, &quot;Not significant&quot;)) 5- The “las” argument allows to rotate the x-axis labels for a better readability. Try value 2 for las: what happens? correction barplot(table(genes_significance), col=c(&quot;blue&quot;, &quot;red&quot;, &quot;grey&quot;), names.arg=c(&quot;Down&quot;, &quot;Up&quot;, &quot;Not significant&quot;), las=2) 6- Create a pie chart of the same information (Enriched, Depleted, None) correction pie(table(genes_significance)) Change the color of the slices, modify the labels, and add a title. correction pie(table(genes_significance), col=c(&quot;blue&quot;, &quot;red&quot;, &quot;grey&quot;), main=&quot;pie chart&quot;, labels=c(&quot;Down&quot;, &quot;Up&quot;, &quot;Not significant&quot;)) 17.3.3 Exercise 11c- histogram 1- Use genes object from exercise 11a to create a histogram of the gene expression distribution of sample 1. correction hist(genes$sample1) 2- Repeat the histogram but change argument “breaks” to 50. What is the difference ? correction hist(genes$sample1, breaks=50) 3- Color this histogram in light blue. correction hist(genes$sample1, breaks=50, col=&quot;lightblue&quot;) 4- “Zoom in” the histogram: show only the distribution of expression values from 0 to 2 (x-axis) using the xlim argument. correction hist(genes$sample1, breaks=50, col=&quot;lightblue&quot;, xlim=c(0, 2)) 5- Save the histogram in a pdf file. correction pdf(&quot;myhistogram.pdf&quot;) hist(genes$sample1, breaks=50, col=&quot;lightblue&quot;, xlim=c(0, 2)) dev.off() "],["plots-from-other-packages.html", "Part 18 Plots from other packages 18.1 heatmap.2 function from gplots package 18.2 pheatmap function from the pheatmap package 18.3 venn.diagram function from VennDiagram package", " Part 18 Plots from other packages We will see two additional types of plots: Heat map (package gplots or pheatmap) Venn diagram (from package VennDiagram) 18.1 heatmap.2 function from gplots package A heatmap is a graphical representation of data where the values are represented with colors. The heatmap.2 function from the gplots package allows to produce highly customizable heatmaps. # install gplots package install.packages(&quot;gplots&quot;) # load package library(&quot;gplots&quot;) # make matrix mat &lt;- matrix(rnorm(1200), ncol=6) # heatmap with the defaults parameters heatmap.2(x=mat) Useful arguments include: Rowv, Colv : process clustering of columns or rows (default TRUE to both) dendrogram : show dendrogram for row, col, both or none scale : scale data per row, column, or none col : dendrogram color palette trace : control the cyan density lines RowSideColors, ColSideColors : block of colors that represent the columns or the rows labRow,labCol : remove or keep row or col labels main : title xlab, ylab: x-axis or y-axis label heatmap.2(x=mat, Colv=FALSE, dendrogram=&quot;row&quot;, scale=&quot;row&quot;, col=&quot;bluered&quot;, trace=&quot;none&quot;, ColSideColors=rep(c(&quot;green&quot;,&quot;orange&quot;), each=3), labRow=FALSE, main=&quot;my heatmap&quot;, ylab=&quot;Genes&quot;, xlab=&quot;Samples&quot;) 18.2 pheatmap function from the pheatmap package # install pheatmap package install.package(&quot;pheatmap&quot;) Get started: # load package library(pheatmap) # create matrix mat &lt;- matrix(rnorm(1200), ncol=6) # heatmap with the defaults parameters pheatmap(mat) Change the color palette / gradient # with &quot;rainbow&quot; colors pheatmap(mat, color=rainbow(50)) # with blue to red (middle color white) pheatmap(mat, color=colorRampPalette(c(&quot;navy&quot;, &quot;white&quot;, &quot;red&quot;))(50)) Do not cluster rows or columns # remove the clustering by rows pheatmap(mat, cluster_rows=FALSE) # remove the clustering by columns pheatmap(mat, cluster_cols=FALSE) # remove both clusterings pheatmap(mat, cluster_rows=FALSE, cluster_cols=FALSE) Add some annotation colored bar(s): # add column names to mat colnames(mat) &lt;- paste0(&quot;Sample&quot;, 1:6) # create data frame for annotation (in the case of samples, information about the experiment, for example) annot_cols = data.frame( Group = c(rep(&quot;WT&quot;, 3), rep(&quot;KO&quot;, 3)), TimePoint = rep(c(0, 5, 10), each=2), row.names = colnames(mat) ) # plot pheatmap(mat, annotation_col = annot_cols) 18.3 venn.diagram function from VennDiagram package A Venn diagram shows all possible logical relations between data sets. The venn.diagram function from the VennDiagram package allows to create up to a 5-way Venn Diagram (i.e. 5 circles representing 5 data sets). # load package library(VennDiagram) # Prepare character vectors v1 &lt;- c(&quot;DKK1&quot;, &quot;NPC1&quot;, &quot;NAPG&quot;, &quot;ERG&quot;, &quot;VHL&quot;, &quot;BTD&quot;, &quot;MALL&quot;, &quot;HAUS1&quot;) v2 &lt;- c(&quot;SMAD4&quot;, &quot;DKK1&quot;, &quot;ASXL3&quot;, &quot;ERG&quot;, &quot;CKLF&quot;, &quot;TIAM1&quot;, &quot;VHL&quot;, &quot;BTD&quot;, &quot;EMP1&quot;, &quot;MALL&quot;, &quot;PAX3&quot;) v3 &lt;- c(&quot;PAX3&quot;, &quot;SMAD4&quot;, &quot;DKK1&quot;, &quot;MALL&quot;, &quot;ERG&quot;, &quot;CDKN2A&quot;, &quot;DENR&quot;, &quot;NPC1&quot;, &quot;NAPG&quot;) # Create a list of vectors vlist &lt;- list(v1, v2, v3) names(vlist) &lt;- c(&quot;list1&quot;, &quot;list2&quot;, &quot;list3&quot;) # 2-way Venn venn.diagram(vlist[1:2], filename=&quot;Venn_2way.png&quot;, imagetype=&quot;png&quot;) # 3-way Venn venn.diagram(vlist, filename=&quot;Venn_3way.png&quot;, imagetype=&quot;png&quot;) More arguments: main : title sub : sub-title main.col : color of title font fill : color of circles col : color of circle lines cat.col : color of category labels venn.diagram(vlist, filename=&quot;Venn_3way_more.png&quot;, imagetype=&quot;png&quot;, main=&quot;Venn diagram&quot;, sub=&quot;3-way&quot;, main.col=&quot;red&quot;, fill=c(&quot;lightgreen&quot;, &quot;lightblue&quot;, &quot;lightsalmon&quot;), col=c(&quot;lightgreen&quot;, &quot;lightblue&quot;, &quot;lightsalmon&quot;), cat.col=c(&quot;green&quot;, &quot;blue&quot;, &quot;salmon&quot;)) "],["ggplot2-package.html", "Part 19 ggplot2 package 19.1 Getting started 19.2 Scatter plot 19.3 Box plots 19.4 Dot plots 19.5 Bar plots 19.6 Histograms 19.7 About themes 19.8 Saving plots in files 19.9 Exercise 12: ggplot2 19.10 More about the theme() function 19.11 Volcano plots", " Part 19 ggplot2 package Graphing package inspired by the Grammar of Graphics work of Leland Wilkinson. A tool that enables to concisely describe the components of a graphic. Why ggplot2 ? Flexible Customizable Pretty ! Well documented We will see: Scatter plots Box plots Dot plots Bar plots Histograms How to save plots Volcano plots 19.1 Getting started Load package: library(ggplot2) All ggplots start with a base layer created with the ggplot() function: ggplot(data=dataframe, mapping=aes(x=column1, y=column2)) The base layer is setting the grounds but NOT plotting anything: You then add a layer (with the + sign) that describes what kind of plot you want: geom_point() geom_bar() geom_histogram() geom_boxplot() … And then you will add one layer at a time to add more features to your plot! 19.2 Scatter plot # Example of a scatter plot: add the geom_point() layer ggplot(data=dataframe, mapping=aes(x=column1, y=column2)) + geom_point() Example of a simple scatter plot: # Create a data frame df1 &lt;- data.frame(sample1=rnorm(200), sample2=rnorm(200)) # Plot ! ggplot(data= df1 , mapping=aes(x=sample1, y=sample2)) + geom_point() Add layers to that object to customize the plot: ggtitle to add a title geom_vline to add a vertical line etc. ggplot(data= df1 , mapping=aes(x=sample1, y=sample2)) + geom_point() + ggtitle(label=&quot;my first ggplot&quot;) + geom_vline(xintercept=0) Bookmark that ggplot2 reference and that good cheatsheet for some of the ggplot2 options. You can save the plot in an object at any time and add layers to that object: # Save in an object p &lt;- ggplot(data= df1 , mapping=aes(x=sample1, y=sample2)) + geom_point() # Add layers to that object p + ggtitle(label=&quot;my first ggplot&quot;) What is inside the aes (aesthetics)function ? Anything that varies according to your data ! Columns with values to be plotted. Columns with which you want to, for example, color the points. Color all points in red (not depending on the data): ggplot(data=df1 , mapping=aes(x=sample1, y=sample2)) + geom_point(color=&quot;red&quot;) Color the points according to another column in the data frame: # Build a data frame from df1: add a column with &quot;yes&quot; and &quot;no&quot; df2 &lt;- data.frame(df1, grouping=rep(c(&quot;yes&quot;, &quot;no&quot;), c(80, 120))) # Plot and add the color parameter in the aes(): pscat &lt;- ggplot(data=df2, mapping=aes(x=sample1, y=sample2, color=grouping)) + geom_point() pscat 19.3 Box plots Simple boxplot showing the data distribution of sample 1: ggplot(data=df2, mapping=aes(x=&quot;&quot;, y=sample1)) + geom_boxplot() Split the data into 2 boxes: ggplot(data=df2, mapping=aes(x=grouping, y=sample1)) + geom_boxplot() What if you want to plot both sample1 and sample2 ? You need to convert into a long format What is the long format ? Plotting both sample1 and sample2: # install package reshape2 install.packages(&quot;reshape2&quot;) # load package library(&quot;reshape2&quot;) # convert to long format df_long &lt;- melt(data=df2) # all numeric values are organized into only one column: value # plot: ggplot(data=df_long, mapping=aes(x=variable, y=value)) + geom_boxplot() What if now you also want to see the distribution of “yes” and “no” in both sample1 and sample2 ? Integrate a parameter to the aes() # Either color (color of the box border) ggplot(data=df_long, mapping=aes(x=variable, y=value, color=grouping)) + geom_boxplot() # Or fill (color inside the box) ggplot(data=df_long, mapping=aes(x=variable, y=value, fill=grouping)) + geom_boxplot() Do you want to change the default colors? Integrate either layer: scale_color_manual() for the boxes border color scale_fill_manual() for the boxes color (inside) pbox_fill &lt;- ggplot(data=df_long, mapping=aes(x=variable, y=value, fill=grouping)) + geom_boxplot() + scale_fill_manual(values=c(&quot;slateblue2&quot;, &quot;chocolate&quot;)) pbox_fill pbox_col &lt;- ggplot(data=df_long, mapping=aes(x=variable, y=value, color=grouping)) + geom_boxplot() + scale_color_manual(values=c(&quot;slateblue2&quot;, &quot;chocolate&quot;)) pbox_col 19.4 Dot plots Example of the expression of a gene in 6 samples: 2 experimental groups in triplicates. # create a named vector with the expression of a gene mygene &lt;- c(8.1, 8.2, 8.6, 8.7, 9.4, 8.5) # the names of each element of the vector are sample names names(mygene) &lt;- c(&quot;KO1&quot;, &quot;KO2&quot;, &quot;KO3&quot;, &quot;WT1&quot;, &quot;WT2&quot;, &quot;WT3&quot;) # transform to long format mygenelong &lt;- melt(data=mygene) # add new columns containing sample names and experimental groups mygenelong$sample_name &lt;- rownames(mygenelong) mygenelong$group &lt;- gsub(&quot;[1-3]{1}&quot;, &quot;&quot;, mygenelong$sample_name) # dot plot # add labels with &quot;label&quot; in the aes() and layer geom_text() # nudge_x adjust the labels horizontally pdot &lt;- ggplot(data=mygenelong, mapping=aes(x=group, y=value, col=group, label=sample_name)) + geom_point() + geom_text(nudge_x=0.2) pdot Add more layers: xlab() to change the x axis label ylab() to change the y axis label theme to manage the legend pdot + xlab(label=&quot;Experimental group&quot;) + ylab(label=&quot;Normalized expression (log2)&quot;) + ggtitle(label=&quot;Expression of gene 1&quot;) + theme_bw() + theme(legend.position=&quot;none&quot;) 19.5 Bar plots # A simple bar plot ggplot(data=df2, mapping=aes(x=grouping)) + geom_bar() Customize: scale_x_discrete is used to handle x-axis title and labels coord_flip swaps the x and y axis # Save the plot in the object &quot;p&quot; pbar &lt;- ggplot(data=df2, mapping=aes(x=grouping, fill=grouping)) + geom_bar() pbar # Change x axis label with scale_x_discrete and change order of the bars: p2 &lt;- pbar + scale_x_discrete(name=&quot;counts of yes / no&quot;, limits=c(&quot;yes&quot;, &quot;no&quot;)) p2 # Swapping x and y axis with coord_flip(): p3 &lt;- p2 + coord_flip() p3 # Change fill p4 &lt;- p3 + scale_fill_manual(values=c(&quot;yellow&quot;, &quot;cyan&quot;)) p4 19.5.1 Bar plots with error bars We can create error bars on barplots. Let’s create a toy data set, that contains 7 independent qPCR measurements for 3 genes: pcr &lt;- data.frame(Dkk1=c(18.2, 18.1, 17.8, 17.85, 18.6, 12.4, 10.7), Pten=c(15.1,15.2, 15.0, 15.6, 15.3, 14.8, 15.9), Tp53=c(9.1, 9.9, 9.25, 8.7, 8.8, 9.3, 7.8)) The height of the bar will represent the average qPCR measurement. The error bar will represent the average - standard deviation on the lowe part, and the average + standard deviation on the high part. We need to create a data frame that summarizes these values: pcr_summary &lt;- data.frame(average=apply(pcr, 2, mean), standard_deviation=apply(pcr, 2, sd), genes=colnames(pcr)) And now we can plot! ggplot(pcr_summary, aes(x=genes, y=average, fill=genes)) + geom_bar(stat = &quot;identity&quot;) + geom_errorbar(aes(ymin=average-standard_deviation, ymax=average+standard_deviation), colour=&quot;black&quot;, width=.1) 19.6 Histograms Simple histogram on one sample (using the df2 data frame): ggplot(data=df1, mapping=aes(x=sample1)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Histogram on more samples (using df_long): ggplot(data=df_long, mapping=aes(x=value)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. Split the data per sample (“variable” column that represents here the samples): ggplot(data=df_long, mapping=aes(x=value, fill=variable)) + geom_histogram() ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. By default, the histograms are stacked: change to position dodge (side by side): phist &lt;- ggplot(data=df_long, mapping=aes(x=value, fill=variable)) + geom_histogram(position=&#39;dodge&#39;) phist ## `stat_bin()` using `bins = 30`. Pick better value with `binwidth`. 19.7 About themes You can change the default global theme (background color, grid lines etc. all non-data display): # go back to a previous plot p &lt;- ggplot(data=df_long, mapping=aes(x=value)) + geom_histogram() # Try different themes p + theme_bw() p + theme_minimal() p + theme_void() p + theme_grey() p + theme_dark() p + theme_light() 19.8 Saving plots in files The same as for regular plots applies: png(&quot;myggplot.png&quot;) p dev.off() You can also use the ggplot2 ggsave function: # By default, save the last plot that was produced ggsave(filename=&quot;lastplot.png&quot;) # You can pick which plot you want to save: ggsave(filename=&quot;myplot.png&quot;, plot=p) # Many different formats are available: # &quot;eps&quot;, &quot;ps&quot;, &quot;tex&quot;, &quot;pdf&quot;, &quot;jpeg&quot;, &quot;tiff&quot;, &quot;png&quot;, &quot;bmp&quot;, &quot;svg&quot;, &quot;wmf&quot; ggsave(filename=&quot;myplot.ps&quot;, plot=p, device=&quot;ps&quot;) # Change the height and width (and their unit): ggsave(filename=&quot;myplot.pdf&quot;, width = 20, height = 20, units = &quot;cm&quot;) You can also organize several plots on one page One way is to use the gridExtra package: ncol, nrow: arrange plots in such number of columns and rows install.packages(&quot;gridExtra&quot;) # load package library(gridExtra) # 2 rows and 2 columns grid.arrange(pscat, pbox_fill, pbar, phist, nrow=2, ncol=2) # 1 row and 4 columns grid.arrange(pscat, pbox_fill, pbar, phist, nrow=1, ncol=4) Combine ggsave and grid.arrange: myplots &lt;- grid.arrange(pscat, pbox_fill, pbar, phist, nrow=1, ncol=4) ggsave(filename=&quot;mygridarrange.png&quot;, plot=myplots)) 19.9 Exercise 12: ggplot2 Create the script “exercise12.R” and save it to the “Rcourse/Module3” directory: you will save all the commands of exercise 12 in that script. Remember you can comment the code using #. correction getwd() setwd(&quot;~/Rcourse/Module3&quot;) 19.9.1 Exercise 12a- Scatter plot 1- Load ggplot2 package correction library(ggplot2) 2- Download the data we will use for plotting: download.file(&quot;https://raw.githubusercontent.com/biocorecrg/CRG_RIntroduction/master/ex12_normalized_intensities.csv&quot;, &quot;ex12_normalized_intensities.csv&quot;, method=&quot;curl&quot;) 3- Read file into object “project1” (remember the input/output tutorial!) About this file: It is comma separated (csv format). The first row is the header. Take the row names from the first column. correction project1 &lt;- read.table(&quot;ex12_normalized_intensities.csv&quot;, sep=&quot;,&quot;, header=TRUE, row.names = 1) 4- Using ggplot, create a simple scatter plot representing gene expression of “sampleB” on the x-axis and “sampleH” on the y-axis. correction ggplot(data=project1, mapping=aes(x=sampleB, y=sampleH)) + geom_point() 5- Add a column to the data frame “project1” (call this column “expr_limits”), that will be filled the following way: if the expression of a gene is &gt; 13 in both sampleB and sampleH, set to the value in “expr_limits” to “high” if the expression of a gene is &lt; 6 in both sampleB and sampleH, set it to “low” if different, set it to “normal.” correction # Initialize all values to &quot;normal&quot; project1$expr_limits &lt;- &quot;normal&quot; # &quot;high&quot; if project1$sampleB &gt; 13 and project1$sampleH &gt; 13 project1$expr_limits[project1$sampleB &gt; 13 &amp; project1$sampleH &gt; 13] &lt;- &quot;high&quot; # &quot;low&quot; if project1$sampleB &lt; 6 and project1$sampleH &lt; 6 project1$expr_limits[project1$sampleB &lt; 6 &amp; project1$sampleH &lt; 6] &lt;- &quot;low&quot; ## more complicated version, using a for loop and if statement # initialize column &quot;expr_limits&quot; with &quot;normal&quot; project1$expr_limits &lt;- &quot;normal&quot; # loop around each row of &quot;project1&quot; for(i in 1:nrow(project1)){ # create an object that contains only row &quot;i&quot; (the row will be different at every iteration) rowi &lt;- project1[i,] # test values in rowi: assign expr_limits accordingly if(rowi$sampleB &gt; 13 &amp; rowi$sampleH &gt; 13){ project1$expr_limits[i] &lt;- &quot;high&quot; }else if(rowi$sampleB &lt; 6 &amp; rowi$sampleH &lt; 6){ project1$expr_limits[i] &lt;- &quot;low&quot; } } 6- Color the points of the scatter plot according to the newly created column “expr_limits.” Save that plot in the object “p” correction p &lt;- ggplot(data=project1, mapping=aes(x=sampleB, y=sampleH, color=expr_limits)) + geom_point() 7- Add a layer to “p” in order to change the points colors to blue (for low), grey (for normal) and red (for high). Save this plot in the object “p2.” correction p2 &lt;- p + scale_color_manual(values=c(&quot;red&quot;, &quot;blue&quot;, &quot;grey&quot;)) 8- Save p2 in a jpeg file. a. Try with RStudio Plots window (Export) b. Try in the console: correction jpeg(&quot;myscatterggplot.jpg&quot;) p2 dev.off() 19.9.2 Exercise 12b- Box plot 1- Convert “project1” from a wide format to a long format: save in the object “project_long” Note: remember melt function from reshape2 package. correction library(reshape2) project_long &lt;- melt(data=project1) 2- Produce a boxplot of the expression of all samples (i.e. each sample is represented by a box) correction ggplot(data=project_long, mapping=aes(x=variable, y=value)) + geom_boxplot() 3- Modify the previous boxplot so as to obtain 3 “sub-boxplots” per sample, each representing the expression of either “low,” “normal” or “high” genes. correction ggplot(data=project_long, mapping=aes(x=variable, y=value, color=expr_limits)) + geom_boxplot() 4- Rotate the x-axis labels (90 degrees angle). This is new ! Google it !! correction ggplot(data=project_long, mapping=aes(x=variable, y=value, color=expr_limits)) + geom_boxplot() + theme(axis.text.x = element_text(angle = 90)) 5- Finally, add a title of your choice to the plot. correction ggplot(data=project_long, mapping=aes(x=variable, y=value, color=expr_limits)) + geom_boxplot() + theme(axis.text.x = element_text(angle = 90)) + ggtitle(&quot;My boxplots&quot;) 19.9.3 Exercise 12c- Bar plot 1- Produce a bar plot of how many low/normal/high genes are in the column “expr_limits” of “project1.” correction ggplot(data=project1, mapping=aes(x=expr_limits)) + geom_bar() 2- Add an horizontal line at counts 250 (y-axis). Save the plot in the object “bar” correction bar &lt;- ggplot(data=project1, mapping=aes(x=expr_limits)) + geom_bar() + geom_hline(yintercept=250) 3- Swap the x and y axis. Save in object “bar2.” correction bar2 &lt;- bar + coord_flip() 4- Save “bar” and “bar2” plots in a “png” file, using the png()** function, in the console: use grid.arrange (from the gridExtra package) to organize both plots in one page !** correction png(&quot;mybarplots.png&quot;, width=1000) grid.arrange(bar, bar2, nrow=1, ncol=2) dev.off() 19.9.4 Exercise 12d- Histogram 1- Create a simple histogram using project_long (column “value”). correction ggplot(data=project_long, mapping=aes(x=value)) + geom_histogram() 2- Notice that you get the following warning message\" stat_bin() using bins = 30. Pick better value with binwidth. Set “bins”\" parameter of geom_histogram() to 50. correction ggplot(data=project_long, mapping=aes(x=value)) + geom_histogram(bins=50) 3- The histogram plots the expression values for All samples. Change the plot so as to obtain one histograms per sample. correction ggplot(data=project_long, mapping=aes(x=value, fill=variable)) + geom_histogram(bins=50) 4- By default, geom_histogram produces a stacked histogram. Change argument “position” to “dodge.” correction hist1 &lt;- ggplot(data=project_long, mapping=aes(x=value, fill=variable)) + geom_histogram(position=&quot;dodge&quot;) 5- A bit messy ?? Run the following: hist2 &lt;- ggplot(data=project_long, mapping=aes(x=value, fill=variable)) + geom_histogram(bins=50) + facet_grid(~variable) facet_grid() is another easy way to split the views! 6- Change the default colors with scale_fill_manual(). You can try the rainbow() function for coloring. correction hist3 &lt;- hist2 + scale_fill_manual(values=rainbow(8)) 7- “Zoom in” the plots: set the x-axis limits from from 6 to 13. Add the xlim() layer. correction hist4 &lt;- hist3 + xlim(6, 13) 8- Change the default theme to theme_minimal() correction hist5 &lt;- hist4 + theme_minimal() 9- Save that last plot to a file (format of your choice) with ggsave() correction ggsave(filename=&quot;myhistograms.png&quot;, plot=hist5, device=&quot;png&quot;, width=20) 19.10 More about the theme() function The theme() allows a precise control of graphical parameters such as axis text, ticks and labels, or legend texts and labels, etc. More details here # Let&#39;s the project_long object from exercise 12, and plot boxplots boxp &lt;- ggplot(data=project_long, aes(x=variable, y=value, color=expr_limits)) + geom_boxplot() # Remove the legend title: boxp + theme(legend.title=element_blank()) # Change font of legend text boxp + theme(legend.title=element_blank(), legend.text = element_text(colour=&quot;red&quot;, size = 8, face = &quot;bold&quot;)) # Put legend on the top of the plot boxp + theme(legend.title=element_blank(), legend.text = element_text(colour=&quot;red&quot;, size = 8, face = &quot;bold&quot;), legend.position=&quot;top&quot;) # Rotate x-axis labels boxp + theme(legend.title=element_blank(), legend.text = element_text(colour=&quot;red&quot;, size = 8, face = &quot;bold&quot;), legend.position=&quot;top&quot;, axis.text.x = element_text(angle = 90)) # Add a color to the plot&#39;s background boxp + theme(legend.title=element_blank(), legend.text = element_text(colour=&quot;red&quot;, size = 8, face = &quot;bold&quot;), legend.position=&quot;top&quot;, axis.text.x = element_text(angle = 90), plot.background = element_rect(fill = &quot;yellow&quot;)) 19.11 Volcano plots A volcano plot is a type of scatter plot represents differential expression of features (genes for example): on the x-axis we typically find the fold change and on the y-axis the p-value. # Download the data we will use for plotting download.file(&quot;https://raw.githubusercontent.com/biocorecrg/CRG_RIntroduction/master/de_df_for_volcano.rds&quot;, &quot;de_df_for_volcano.rds&quot;, method=&quot;curl&quot;) # The RDS format is used to save a single R object to a file, and to restore it. # Extract that object in the current session: tmp &lt;- readRDS(&quot;de_df_for_volcano.rds&quot;) # remove rows that contain NA values de &lt;- tmp[complete.cases(tmp), ] # The basic scatter plot: x is &quot;log2FoldChange&quot;, y is &quot;pvalue&quot; ggplot(data=de, aes(x=log2FoldChange, y=pvalue)) + geom_point() Doesn’t look quite like a Volcano plot… Convert the p-value into a -log10(p-value) # Convert directly in the aes() p &lt;- ggplot(data=de, aes(x=log2FoldChange, y=-log10(pvalue))) + geom_point() # Add more simple &quot;theme&quot; p &lt;- ggplot(data=de, aes(x=log2FoldChange, y=-log10(pvalue))) + geom_point() + theme_minimal() # Add vertical lines for log2FoldChange thresholds, and one horizontal line for the p-value threshold p2 &lt;- p + geom_vline(xintercept=c(-0.6, 0.6), col=&quot;red&quot;) + geom_hline(yintercept=-log10(0.05), col=&quot;red&quot;) # The significantly differentially expressed genes are the ones found in the upper-left and upper-right corners. # Add a column to the data frame to specify if they are UP- or DOWN- regulated (log2FoldChange respectively positive or negative) # add a column of NAs de$diffexpressed &lt;- &quot;NO&quot; # if log2Foldchange &gt; 0.6 and pvalue &lt; 0.05, set as &quot;UP&quot; de$diffexpressed[de$log2FoldChange &gt; 0.6 &amp; de$pvalue &lt; 0.05] &lt;- &quot;UP&quot; # if log2Foldchange &lt; -0.6 and pvalue &lt; 0.05, set as &quot;DOWN&quot; de$diffexpressed[de$log2FoldChange &lt; -0.6 &amp; de$pvalue &lt; 0.05] &lt;- &quot;DOWN&quot; # Re-plot but this time color the points with &quot;diffexpressed&quot; p &lt;- ggplot(data=de, aes(x=log2FoldChange, y=-log10(pvalue), col=diffexpressed)) + geom_point() + theme_minimal() # Add lines as before... p2 &lt;- p + geom_vline(xintercept=c(-0.6, 0.6), col=&quot;red&quot;) + geom_hline(yintercept=-log10(0.05), col=&quot;red&quot;) ## Change point color # 1. by default, it is assigned to the categories in an alphabetical order): p3 &lt;- p2 + scale_color_manual(values=c(&quot;blue&quot;, &quot;black&quot;, &quot;red&quot;)) # 2. to automate a bit: ceate a named vector: the values are the colors to be used, the names are the categories they will be assigned to: mycolors &lt;- c(&quot;blue&quot;, &quot;red&quot;, &quot;black&quot;) names(mycolors) &lt;- c(&quot;DOWN&quot;, &quot;UP&quot;, &quot;NO&quot;) p3 &lt;- p2 + scale_colour_manual(values = mycolors) # Now write down the name of genes beside the points... # Create a new column &quot;delabel&quot; to de, that will contain the name of genes differentially expressed (NA in case they are not) de$delabel &lt;- NA de$delabel[de$diffexpressed != &quot;NO&quot;] &lt;- de$gene_symbol[de$diffexpressed != &quot;NO&quot;] ggplot(data=de, aes(x=log2FoldChange, y=-log10(pvalue), col=diffexpressed, label=delabel)) + geom_point() + theme_minimal() + geom_text() # Finally, we can organize the labels nicely using the &quot;ggrepel&quot; package and the geom_text_repel() function # load library library(ggrepel) # plot adding up all layers we have seen so far ggplot(data=de, aes(x=log2FoldChange, y=-log10(pvalue), col=diffexpressed, label=delabel)) + geom_point() + theme_minimal() + geom_text_repel() + scale_color_manual(values=c(&quot;blue&quot;, &quot;black&quot;, &quot;red&quot;)) + geom_vline(xintercept=c(-0.6, 0.6), col=&quot;red&quot;) + geom_hline(yintercept=-log10(0.05), col=&quot;red&quot;) "]]
